
ebpf_programs/object/default/prog18.bpf.o:	file format elf64-bpf

Disassembly of section .text:

0000000000000000 <helper>:
; __u16 helper() {
       0:	b7 01 00 00 0c 00 00 00	r1 = 12
;     __u8 g = 12;
       1:	73 1a ff ff 00 00 00 00	*(u8 *)(r10 - 1) = r1
;     __u16 uga = g * 2;
       2:	71 a1 ff ff 00 00 00 00	r1 = *(u8 *)(r10 - 1)
       3:	67 01 00 00 01 00 00 00	r1 <<= 1
       4:	6b 1a fc ff 00 00 00 00	*(u16 *)(r10 - 4) = r1
;     return uga;
       5:	69 a0 fc ff 00 00 00 00	r0 = *(u16 *)(r10 - 4)
       6:	95 00 00 00 00 00 00 00	exit

Disassembly of section xdp:

0000000000000000 <xdp_prog>:
; int xdp_prog(struct xdp_md *ctx) {
       0:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
       1:	b7 01 00 00 01 00 00 00	r1 = 1
;     __u32 this = 1;
       2:	63 1a ec ff 00 00 00 00	*(u32 *)(r10 - 20) = r1
       3:	b7 02 00 00 00 00 00 00	r2 = 0
;     __u8 value = 0;
       4:	73 2a eb ff 00 00 00 00	*(u8 *)(r10 - 21) = r2
       5:	b7 02 00 00 06 00 00 00	r2 = 6
;     __u8 you_are_cool = 1 + 5;
       6:	73 2a ea ff 00 00 00 00	*(u8 *)(r10 - 22) = r2
;     __u16 trying12 = 1;
       7:	6b 1a e8 ff 00 00 00 00	*(u16 *)(r10 - 24) = r1
;     this += -1;
       8:	61 a1 ec ff 00 00 00 00	r1 = *(u32 *)(r10 - 20)
       9:	07 01 00 00 ff ff ff ff	r1 += -1
      10:	63 1a ec ff 00 00 00 00	*(u32 *)(r10 - 20) = r1
;     __u32 data_start = ctx->data;
      11:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
      12:	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0)
      13:	63 1a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r1
;     __u32 data_end = ctx->data_end;
      14:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
      15:	61 11 04 00 00 00 00 00	r1 = *(u32 *)(r1 + 4)
      16:	63 1a e0 ff 00 00 00 00	*(u32 *)(r10 - 32) = r1
;     if(data_end < data_start)
      17:	61 a1 e0 ff 00 00 00 00	r1 = *(u32 *)(r10 - 32)
      18:	61 a2 e4 ff 00 00 00 00	r2 = *(u32 *)(r10 - 28)
      19:	3d 21 04 00 00 00 00 00	if r1 >= r2 goto +4 <LBB1_2>
      20:	05 00 00 00 00 00 00 00	goto +0 <LBB1_1>

00000000000000a8 <LBB1_1>:
      21:	b7 01 00 00 01 00 00 00	r1 = 1
;         return XDP_DROP;
      22:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      23:	05 00 17 00 00 00 00 00	goto +23 <LBB1_7>

00000000000000c0 <LBB1_2>:
;     struct xdp_md *copy = ctx;
      24:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
      25:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
;     __u32 rx_index = copy->rx_queue_index;
      26:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      27:	61 11 10 00 00 00 00 00	r1 = *(u32 *)(r1 + 16)
      28:	63 1a d4 ff 00 00 00 00	*(u32 *)(r10 - 44) = r1
;     if(you_are_cool > value) {
      29:	71 a2 ea ff 00 00 00 00	r2 = *(u8 *)(r10 - 22)
      30:	71 a1 eb ff 00 00 00 00	r1 = *(u8 *)(r10 - 21)
      31:	7d 21 06 00 00 00 00 00	if r1 s>= r2 goto +6 <LBB1_4>
      32:	05 00 00 00 00 00 00 00	goto +0 <LBB1_3>

0000000000000108 <LBB1_3>:
;         __u16 helper_return = helper();
      33:	85 10 00 00 ff ff ff ff	call -1
      34:	6b 0a d2 ff 00 00 00 00	*(u16 *)(r10 - 46) = r0
      35:	b7 01 00 00 02 00 00 00	r1 = 2
;         return XDP_PASS;
      36:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      37:	05 00 09 00 00 00 00 00	goto +9 <LBB1_7>

0000000000000130 <LBB1_4>:
;     if(rx_index != 0)
      38:	61 a1 d4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 44)
      39:	15 01 04 00 00 00 00 00	if r1 == 0 goto +4 <LBB1_6>
      40:	05 00 00 00 00 00 00 00	goto +0 <LBB1_5>

0000000000000148 <LBB1_5>:
      41:	b7 01 00 00 00 00 00 00	r1 = 0
;         this = 0;
      42:	63 1a ec ff 00 00 00 00	*(u32 *)(r10 - 20) = r1
      43:	05 00 00 00 00 00 00 00	goto +0 <LBB1_6>

0000000000000160 <LBB1_6>:
      44:	b7 01 00 00 01 00 00 00	r1 = 1
;     return XDP_DROP; // Drop all packets
      45:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      46:	05 00 00 00 00 00 00 00	goto +0 <LBB1_7>

0000000000000178 <LBB1_7>:
; }
      47:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      48:	95 00 00 00 00 00 00 00	exit
