
ebpf_programs/object/default/prog49.bpf.o:	file format elf64-bpf

Disassembly of section .text:

0000000000000000 <test_function>:
; int test_function(__u32 var1) {
       0:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
       1:	b7 01 00 00 00 00 00 00	r1 = 0
;     struct test_struct var0 = {0,0,0,0,0,0,0};
       2:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
       3:	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r1
;     var0.test0 = var1;
       4:	61 a1 fc ff 00 00 00 00	r1 = *(u32 *)(r10 - 4)
       5:	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r1
;     var0.test1 = var0.test0 * var1;
       6:	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 24)
       7:	61 a2 fc ff 00 00 00 00	r2 = *(u32 *)(r10 - 4)
       8:	2f 21 00 00 00 00 00 00	r1 *= r2
       9:	73 1a f0 ff 00 00 00 00	*(u8 *)(r10 - 16) = r1
;     var0.test2 = var0.test1 * var1;
      10:	71 a1 f0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 16)
      11:	61 a2 fc ff 00 00 00 00	r2 = *(u32 *)(r10 - 4)
      12:	2f 21 00 00 00 00 00 00	r1 *= r2
      13:	73 1a f1 ff 00 00 00 00	*(u8 *)(r10 - 15) = r1
;     var0.test3 = var0.test2 * var1;
      14:	71 a1 f1 ff 00 00 00 00	r1 = *(u8 *)(r10 - 15)
      15:	61 a2 fc ff 00 00 00 00	r2 = *(u32 *)(r10 - 4)
      16:	2f 21 00 00 00 00 00 00	r1 *= r2
      17:	73 1a f2 ff 00 00 00 00	*(u8 *)(r10 - 14) = r1
;     var0.test4 = var0.test3 * var1;
      18:	71 a1 f2 ff 00 00 00 00	r1 = *(u8 *)(r10 - 14)
      19:	61 a2 fc ff 00 00 00 00	r2 = *(u32 *)(r10 - 4)
      20:	2f 21 00 00 00 00 00 00	r1 *= r2
      21:	73 1a f3 ff 00 00 00 00	*(u8 *)(r10 - 13) = r1
;     return var0.test4;
      22:	71 a0 f3 ff 00 00 00 00	r0 = *(u8 *)(r10 - 13)
      23:	95 00 00 00 00 00 00 00	exit

00000000000000c0 <test_function3>:
; int test_function3(var2, var3) {
      24:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      25:	63 2a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r2
;     return var2 + var3;
      26:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      27:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
      28:	0f 10 00 00 00 00 00 00	r0 += r1
      29:	95 00 00 00 00 00 00 00	exit

00000000000000f0 <test_function2>:
; void test_function2() {
      30:	b7 01 00 00 98 00 00 00	r1 = 152
;     __u8 var2 = 152;
      31:	73 1a ff ff 00 00 00 00	*(u8 *)(r10 - 1) = r1
      32:	b7 01 00 00 8f 00 00 00	r1 = 143
;     __u8 var3 = 143;
      33:	73 1a fe ff 00 00 00 00	*(u8 *)(r10 - 2) = r1
      34:	b7 01 00 00 01 00 00 00	r1 = 1
;     __u16 var4 = 1;
      35:	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 144) = r1
      36:	6b 1a fc ff 00 00 00 00	*(u16 *)(r10 - 4) = r1
;     var2 = var3 + 123 + var2 + var4;
      37:	71 a1 fe ff 00 00 00 00	r1 = *(u8 *)(r10 - 2)
      38:	71 a2 ff ff 00 00 00 00	r2 = *(u8 *)(r10 - 1)
      39:	0f 21 00 00 00 00 00 00	r1 += r2
      40:	69 a2 fc ff 00 00 00 00	r2 = *(u16 *)(r10 - 4)
      41:	0f 21 00 00 00 00 00 00	r1 += r2
      42:	07 01 00 00 7b 00 00 00	r1 += 123
      43:	73 1a ff ff 00 00 00 00	*(u8 *)(r10 - 1) = r1
      44:	b7 01 00 00 00 00 00 00	r1 = 0
;     const int key = 0;
      45:	63 1a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r1
;     __u32 * teste = bpf_map_lookup_elem(&array_map, &key);
      46:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      48:	7b 1a 78 ff 00 00 00 00	*(u64 *)(r10 - 136) = r1
      49:	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0)
      50:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      52:	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 128) = r1
      53:	bf a2 00 00 00 00 00 00	r2 = r10
;     __u8 var2 = 152;
      54:	07 02 00 00 f8 ff ff ff	r2 += -8
;     __u32 * teste = bpf_map_lookup_elem(&array_map, &key);
      55:	8d 00 00 00 03 00 00 00	callx r3
      56:	79 a3 70 ff 00 00 00 00	r3 = *(u64 *)(r10 - 144)
      57:	79 a2 78 ff 00 00 00 00	r2 = *(u64 *)(r10 - 136)
      58:	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 128)
      59:	7b 0a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r0
;     const int key1 = 1;
      60:	63 3a ec ff 00 00 00 00	*(u32 *)(r10 - 20) = r3
;     __u32 * teste1 = bpf_map_lookup_elem(&array_map, &key1);
      61:	79 23 00 00 00 00 00 00	r3 = *(u64 *)(r2 + 0)
      62:	bf a2 00 00 00 00 00 00	r2 = r10
;     __u8 var2 = 152;
      63:	07 02 00 00 ec ff ff ff	r2 += -20
;     __u32 * teste1 = bpf_map_lookup_elem(&array_map, &key1);
      64:	8d 00 00 00 03 00 00 00	callx r3
      65:	79 a2 78 ff 00 00 00 00	r2 = *(u64 *)(r10 - 136)
      66:	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 128)
      67:	7b 0a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r0
      68:	b7 03 00 00 02 00 00 00	r3 = 2
;     const int key2 = 2;
      69:	63 3a dc ff 00 00 00 00	*(u32 *)(r10 - 36) = r3
;     __u32 * teste2 = bpf_map_lookup_elem(&array_map, &key2);
      70:	79 23 00 00 00 00 00 00	r3 = *(u64 *)(r2 + 0)
      71:	bf a2 00 00 00 00 00 00	r2 = r10
;     __u8 var2 = 152;
      72:	07 02 00 00 dc ff ff ff	r2 += -36
;     __u32 * teste2 = bpf_map_lookup_elem(&array_map, &key2);
      73:	8d 00 00 00 03 00 00 00	callx r3
      74:	79 a2 78 ff 00 00 00 00	r2 = *(u64 *)(r10 - 136)
      75:	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 128)
      76:	7b 0a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r0
      77:	b7 03 00 00 03 00 00 00	r3 = 3
;     const int key3 = 3;
      78:	63 3a cc ff 00 00 00 00	*(u32 *)(r10 - 52) = r3
;     __u32 * teste3 = bpf_map_lookup_elem(&array_map, &key3);
      79:	79 23 00 00 00 00 00 00	r3 = *(u64 *)(r2 + 0)
      80:	bf a2 00 00 00 00 00 00	r2 = r10
;     __u8 var2 = 152;
      81:	07 02 00 00 cc ff ff ff	r2 += -52
;     __u32 * teste3 = bpf_map_lookup_elem(&array_map, &key3);
      82:	8d 00 00 00 03 00 00 00	callx r3
      83:	79 a2 78 ff 00 00 00 00	r2 = *(u64 *)(r10 - 136)
      84:	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 128)
      85:	7b 0a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r0
      86:	b7 03 00 00 04 00 00 00	r3 = 4
;     const int key4 = 4;
      87:	63 3a bc ff 00 00 00 00	*(u32 *)(r10 - 68) = r3
;     __u32 * teste4 = bpf_map_lookup_elem(&array_map, &key4);
      88:	79 23 00 00 00 00 00 00	r3 = *(u64 *)(r2 + 0)
      89:	bf a2 00 00 00 00 00 00	r2 = r10
;     __u8 var2 = 152;
      90:	07 02 00 00 bc ff ff ff	r2 += -68
;     __u32 * teste4 = bpf_map_lookup_elem(&array_map, &key4);
      91:	8d 00 00 00 03 00 00 00	callx r3
      92:	79 a2 78 ff 00 00 00 00	r2 = *(u64 *)(r10 - 136)
      93:	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 128)
      94:	7b 0a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r0
      95:	b7 03 00 00 05 00 00 00	r3 = 5
;     const int key5 = 5;
      96:	63 3a ac ff 00 00 00 00	*(u32 *)(r10 - 84) = r3
;     __u32 * teste5 = bpf_map_lookup_elem(&array_map, &key5);
      97:	79 23 00 00 00 00 00 00	r3 = *(u64 *)(r2 + 0)
      98:	bf a2 00 00 00 00 00 00	r2 = r10
;     __u8 var2 = 152;
      99:	07 02 00 00 ac ff ff ff	r2 += -84
;     __u32 * teste5 = bpf_map_lookup_elem(&array_map, &key5);
     100:	8d 00 00 00 03 00 00 00	callx r3
     101:	79 a2 78 ff 00 00 00 00	r2 = *(u64 *)(r10 - 136)
     102:	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 128)
     103:	7b 0a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r0
     104:	b7 03 00 00 06 00 00 00	r3 = 6
;     const int key6 = 6;
     105:	63 3a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r3
;     __u32 * teste6 = bpf_map_lookup_elem(&array_map, &key6);
     106:	79 23 00 00 00 00 00 00	r3 = *(u64 *)(r2 + 0)
     107:	bf a2 00 00 00 00 00 00	r2 = r10
;     __u8 var2 = 152;
     108:	07 02 00 00 9c ff ff ff	r2 += -100
;     __u32 * teste6 = bpf_map_lookup_elem(&array_map, &key6);
     109:	8d 00 00 00 03 00 00 00	callx r3
     110:	7b 0a 90 ff 00 00 00 00	*(u64 *)(r10 - 112) = r0
;     if(!teste || !teste1 || !teste2 || !teste3 || !teste4 || !teste5 || !teste6)
     111:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
     112:	15 01 13 00 00 00 00 00	if r1 == 0 goto +19 <LBB2_7>
     113:	05 00 00 00 00 00 00 00	goto +0 <LBB2_1>

0000000000000390 <LBB2_1>:
     114:	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 32)
     115:	15 01 10 00 00 00 00 00	if r1 == 0 goto +16 <LBB2_7>
     116:	05 00 00 00 00 00 00 00	goto +0 <LBB2_2>

00000000000003a8 <LBB2_2>:
     117:	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 48)
     118:	15 01 0d 00 00 00 00 00	if r1 == 0 goto +13 <LBB2_7>
     119:	05 00 00 00 00 00 00 00	goto +0 <LBB2_3>

00000000000003c0 <LBB2_3>:
     120:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     121:	15 01 0a 00 00 00 00 00	if r1 == 0 goto +10 <LBB2_7>
     122:	05 00 00 00 00 00 00 00	goto +0 <LBB2_4>

00000000000003d8 <LBB2_4>:
     123:	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 80)
     124:	15 01 07 00 00 00 00 00	if r1 == 0 goto +7 <LBB2_7>
     125:	05 00 00 00 00 00 00 00	goto +0 <LBB2_5>

00000000000003f0 <LBB2_5>:
     126:	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 96)
     127:	15 01 04 00 00 00 00 00	if r1 == 0 goto +4 <LBB2_7>
     128:	05 00 00 00 00 00 00 00	goto +0 <LBB2_6>

0000000000000408 <LBB2_6>:
     129:	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 112)
     130:	55 01 02 00 00 00 00 00	if r1 != 0 goto +2 <LBB2_8>
     131:	05 00 00 00 00 00 00 00	goto +0 <LBB2_7>

0000000000000420 <LBB2_7>:
;         return;
     132:	05 00 0b 00 00 00 00 00	goto +11 <LBB2_9>

0000000000000428 <LBB2_8>:
;     var4 = test_function3(var2, var3);
     133:	71 a1 ff ff 00 00 00 00	r1 = *(u8 *)(r10 - 1)
     134:	71 a2 fe ff 00 00 00 00	r2 = *(u8 *)(r10 - 2)
     135:	85 10 00 00 ff ff ff ff	call -1
     136:	6b 0a fc ff 00 00 00 00	*(u16 *)(r10 - 4) = r0
;     int value = *teste;
     137:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
     138:	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0)
     139:	63 1a 8c ff 00 00 00 00	*(u32 *)(r10 - 116) = r1
;     value = value + 53;
     140:	61 a1 8c ff 00 00 00 00	r1 = *(u32 *)(r10 - 116)
     141:	07 01 00 00 35 00 00 00	r1 += 53
     142:	63 1a 8c ff 00 00 00 00	*(u32 *)(r10 - 116) = r1
;     return;
     143:	05 00 00 00 00 00 00 00	goto +0 <LBB2_9>

0000000000000480 <LBB2_9>:
; }
     144:	95 00 00 00 00 00 00 00	exit

Disassembly of section xdp:

0000000000000000 <testing_stack>:
; {
       0:	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r1
       1:	b7 01 00 00 7b 00 00 00	r1 = 123
;     __u64 var1 = 123;
       2:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
;     var1 = test_function(var1);
       3:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
       4:	85 10 00 00 ff ff ff ff	call -1
       5:	bf 01 00 00 00 00 00 00	r1 = r0
       6:	67 01 00 00 20 00 00 00	r1 <<= 32
       7:	c7 01 00 00 20 00 00 00	r1 s>>= 32
       8:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
;     test_function2();
       9:	85 10 00 00 ff ff ff ff	call -1
      10:	b7 00 00 00 00 00 00 00	r0 = 0
;     return 0;
      11:	95 00 00 00 00 00 00 00	exit
