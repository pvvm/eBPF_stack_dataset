
ebpf_programs/object/default/prog48.bpf.o:	file format elf64-bpf

Disassembly of section .text:

0000000000000000 <update_info>:
; int update_info (__u64 arrival_time, __u64 finish_time, int key_cpu) {
       0:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
       1:	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r2
       2:	63 3a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r3
;     struct info *value = bpf_map_lookup_elem(&info_array, &key_cpu);
       3:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       5:	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0)
       6:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       8:	bf a2 00 00 00 00 00 00	r2 = r10
       9:	07 02 00 00 e4 ff ff ff	r2 += -28
      10:	8d 00 00 00 03 00 00 00	callx r3
      11:	7b 0a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r0
;     if(!value)
      12:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      13:	55 01 04 00 00 00 00 00	if r1 != 0 goto +4 <LBB0_2>
      14:	05 00 00 00 00 00 00 00	goto +0 <LBB0_1>

0000000000000078 <LBB0_1>:
      15:	b7 01 00 00 00 00 00 00	r1 = 0
;         return 0;
      16:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      17:	05 00 19 00 00 00 00 00	goto +25 <LBB0_3>

0000000000000090 <LBB0_2>:
;     new_value.latency = value->latency + (finish_time - arrival_time);
      18:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      19:	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0)
      20:	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 24)
      21:	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 16)
      22:	1f 32 00 00 00 00 00 00	r2 -= r3
      23:	0f 21 00 00 00 00 00 00	r1 += r2
      24:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
;     new_value.counter = value->counter + 1;
      25:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      26:	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 8)
      27:	07 01 00 00 01 00 00 00	r1 += 1
      28:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     bpf_map_update_elem(&info_array, &key_cpu, &new_value, BPF_ANY);
      29:	18 01 00 00 08 00 00 00 00 00 00 00 00 00 00 00	r1 = 8 ll
      31:	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0)
      32:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      34:	bf a2 00 00 00 00 00 00	r2 = r10
;     new_value.latency = value->latency + (finish_time - arrival_time);
      35:	07 02 00 00 e4 ff ff ff	r2 += -28
      36:	bf a3 00 00 00 00 00 00	r3 = r10
      37:	07 03 00 00 c8 ff ff ff	r3 += -56
      38:	b7 04 00 00 00 00 00 00	r4 = 0
;     bpf_map_update_elem(&info_array, &key_cpu, &new_value, BPF_ANY);
      39:	8d 00 00 00 05 00 00 00	callx r5
      40:	b7 01 00 00 01 00 00 00	r1 = 1
;     return 1;
      41:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      42:	05 00 00 00 00 00 00 00	goto +0 <LBB0_3>

0000000000000158 <LBB0_3>:
; }
      43:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      44:	95 00 00 00 00 00 00 00	exit

0000000000000168 <lookup_lock_map>:
; int lookup_lock_map (int key) {
      45:	63 1a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r1
;     struct map_locked_value *lock_value = bpf_map_lookup_elem(&lock_array, &key);
      46:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      48:	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0)
      49:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      51:	bf a2 00 00 00 00 00 00	r2 = r10
      52:	07 02 00 00 f8 ff ff ff	r2 += -8
      53:	8d 00 00 00 03 00 00 00	callx r3
      54:	7b 0a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r0
;     if(!lock_value) {
      55:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
      56:	55 01 04 00 00 00 00 00	if r1 != 0 goto +4 <LBB1_2>
      57:	05 00 00 00 00 00 00 00	goto +0 <LBB1_1>

00000000000001d0 <LBB1_1>:
      58:	b7 01 00 00 00 00 00 00	r1 = 0
;         return 0;
      59:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      60:	05 00 13 00 00 00 00 00	goto +19 <LBB1_3>

00000000000001e8 <LBB1_2>:
;     bpf_spin_lock(&lock_value->lock);
      61:	18 01 00 00 10 00 00 00 00 00 00 00 00 00 00 00	r1 = 16 ll
      63:	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0)
      64:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
      65:	07 01 00 00 08 00 00 00	r1 += 8
      66:	8d 00 00 00 02 00 00 00	callx r2
;     lock_value->value += 1;
      67:	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 16)
      68:	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0)
      69:	07 01 00 00 01 00 00 00	r1 += 1
      70:	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0) = r1
;     bpf_spin_unlock(&lock_value->lock);
      71:	18 01 00 00 18 00 00 00 00 00 00 00 00 00 00 00	r1 = 24 ll
      73:	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0)
      74:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
      75:	07 01 00 00 08 00 00 00	r1 += 8
      76:	8d 00 00 00 02 00 00 00	callx r2
      77:	b7 01 00 00 01 00 00 00	r1 = 1
;     return 1;
      78:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      79:	05 00 00 00 00 00 00 00	goto +0 <LBB1_3>

0000000000000280 <LBB1_3>:
; }
      80:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      81:	95 00 00 00 00 00 00 00	exit

Disassembly of section xdp:

0000000000000000 <lock_map>:
; {
       0:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
;     int cpu = bpf_get_smp_processor_id();
       1:	18 01 00 00 20 00 00 00 00 00 00 00 00 00 00 00	r1 = 32 ll
       3:	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0)
       4:	8d 00 00 00 01 00 00 00	callx r1
       5:	63 0a ec ff 00 00 00 00	*(u32 *)(r10 - 20) = r0
;     __u64 arrival_time = bpf_ktime_get_ns();
       6:	18 01 00 00 28 00 00 00 00 00 00 00 00 00 00 00	r1 = 40 ll
       8:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
       9:	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0)
      10:	8d 00 00 00 01 00 00 00	callx r1
      11:	7b 0a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r0
      12:	b7 01 00 00 00 00 00 00	r1 = 0
;     lookup_lock_map(0);
      13:	85 10 00 00 ff ff ff ff	call -1
      14:	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 48)
;     __u64 finish_time = bpf_ktime_get_ns();
      15:	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0)
      16:	8d 00 00 00 01 00 00 00	callx r1
      17:	7b 0a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r0
;     if(!update_info(arrival_time, finish_time, cpu)) {
      18:	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 32)
      19:	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 40)
      20:	61 a3 ec ff 00 00 00 00	r3 = *(u32 *)(r10 - 20)
      21:	85 10 00 00 ff ff ff ff	call -1
      22:	bf 01 00 00 00 00 00 00	r1 = r0
      23:	67 01 00 00 20 00 00 00	r1 <<= 32
      24:	77 01 00 00 20 00 00 00	r1 >>= 32
      25:	55 01 04 00 00 00 00 00	if r1 != 0 goto +4 <LBB2_2>
      26:	05 00 00 00 00 00 00 00	goto +0 <LBB2_1>

00000000000000d8 <LBB2_1>:
      27:	b7 01 00 00 01 00 00 00	r1 = 1
;         return XDP_DROP;
      28:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      29:	05 00 03 00 00 00 00 00	goto +3 <LBB2_3>

00000000000000f0 <LBB2_2>:
      30:	b7 01 00 00 01 00 00 00	r1 = 1
;     return XDP_DROP;
      31:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      32:	05 00 00 00 00 00 00 00	goto +0 <LBB2_3>

0000000000000108 <LBB2_3>:
; }
      33:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      34:	95 00 00 00 00 00 00 00	exit
