
ebpf_programs/object/default/prog39.bpf.o:	file format elf64-bpf

Disassembly of section .text:

0000000000000000 <parse_ethhdr>:
; {
       0:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
       1:	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r2
       2:	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r3
; struct ethhdr *eth = nh->pos;
       3:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
       4:	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0)
       5:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       6:	b7 01 00 00 0e 00 00 00	r1 = 14
; int hdrsize = sizeof(*eth);
       7:	63 1a d4 ff 00 00 00 00	*(u32 *)(r10 - 44) = r1
; if (nh->pos + 1 > data_end)
       8:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
       9:	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0)
      10:	07 02 00 00 01 00 00 00	r2 += 1
      11:	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 24)
      12:	3d 21 05 00 00 00 00 00	if r1 >= r2 goto +5 <LBB0_2>
      13:	05 00 00 00 00 00 00 00	goto +0 <LBB0_1>

0000000000000070 <LBB0_1>:
      14:	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 4294967295 ll
; return -1;
      16:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      17:	05 00 11 00 00 00 00 00	goto +17 <LBB0_3>

0000000000000090 <LBB0_2>:
; nh->pos += hdrsize;
      18:	61 a3 d4 ff 00 00 00 00	r3 = *(u32 *)(r10 - 44)
      19:	67 03 00 00 20 00 00 00	r3 <<= 32
      20:	c7 03 00 00 20 00 00 00	r3 s>>= 32
      21:	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 16)
      22:	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0)
      23:	0f 31 00 00 00 00 00 00	r1 += r3
      24:	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0) = r1
; *ethhdr = eth;
      25:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      26:	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 32)
      27:	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0) = r1
; return eth->h_proto;
      28:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      29:	71 12 0c 00 00 00 00 00	r2 = *(u8 *)(r1 + 12)
      30:	71 11 0d 00 00 00 00 00	r1 = *(u8 *)(r1 + 13)
      31:	67 01 00 00 08 00 00 00	r1 <<= 8
      32:	4f 21 00 00 00 00 00 00	r1 |= r2
      33:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      34:	05 00 00 00 00 00 00 00	goto +0 <LBB0_3>

0000000000000118 <LBB0_3>:
; }
      35:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      36:	95 00 00 00 00 00 00 00	exit

0000000000000128 <parse_ip6hdr>:
; {
      37:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
      38:	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r2
      39:	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r3
; struct ipv6hdr *ip6h = nh->pos;
      40:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
      41:	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0)
      42:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
; if (ip6h + 1 > data_end)
      43:	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 40)
      44:	07 02 00 00 28 00 00 00	r2 += 40
      45:	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 24)
      46:	3d 21 05 00 00 00 00 00	if r1 >= r2 goto +5 <LBB1_2>
      47:	05 00 00 00 00 00 00 00	goto +0 <LBB1_1>

0000000000000180 <LBB1_1>:
      48:	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 4294967295 ll
; return -1;
      50:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      51:	05 00 0b 00 00 00 00 00	goto +11 <LBB1_3>

00000000000001a0 <LBB1_2>:
; nh->pos = ip6h + 1;
      52:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      53:	07 01 00 00 28 00 00 00	r1 += 40
      54:	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 16)
      55:	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0) = r1
; *ip6hdr = ip6h;
      56:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      57:	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 32)
      58:	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0) = r1
; return ip6h->nexthdr;
      59:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      60:	71 11 06 00 00 00 00 00	r1 = *(u8 *)(r1 + 6)
      61:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      62:	05 00 00 00 00 00 00 00	goto +0 <LBB1_3>

00000000000001f8 <LBB1_3>:
; }
      63:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      64:	95 00 00 00 00 00 00 00	exit

0000000000000208 <parse_icmp6hdr>:
; {
      65:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
      66:	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r2
      67:	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r3
; struct icmp6hdr *icmp6h = nh->pos;
      68:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
      69:	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0)
      70:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
; if (icmp6h + 1 > data_end)
      71:	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 40)
      72:	07 02 00 00 08 00 00 00	r2 += 8
      73:	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 24)
      74:	3d 21 05 00 00 00 00 00	if r1 >= r2 goto +5 <LBB2_2>
      75:	05 00 00 00 00 00 00 00	goto +0 <LBB2_1>

0000000000000260 <LBB2_1>:
      76:	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 4294967295 ll
; return -1;
      78:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      79:	05 00 0b 00 00 00 00 00	goto +11 <LBB2_3>

0000000000000280 <LBB2_2>:
; nh->pos   = icmp6h + 1;
      80:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      81:	07 01 00 00 08 00 00 00	r1 += 8
      82:	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 16)
      83:	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0) = r1
; *icmp6hdr = icmp6h;
      84:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      85:	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 32)
      86:	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0) = r1
; return icmp6h->icmp6_type;
      87:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      88:	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0)
      89:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      90:	05 00 00 00 00 00 00 00	goto +0 <LBB2_3>

00000000000002d8 <LBB2_3>:
; }
      91:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      92:	95 00 00 00 00 00 00 00	exit

Disassembly of section xdp:

0000000000000000 <xdp_prog>:
; int xdp_prog(struct xdp_md *ctx) {
       0:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
;     void *data_end = (void *)(long)ctx->data_end;
       1:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
       2:	61 11 04 00 00 00 00 00	r1 = *(u32 *)(r1 + 4)
       3:	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r1
; 	void *data = (void *)(long)ctx->data;
       4:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
       5:	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0)
       6:	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r1
; 	nh.pos = data;
       7:	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 32)
       8:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
; 	nh_type = parse_ethhdr(&nh, data_end, &eth);
       9:	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 24)
      10:	bf a1 00 00 00 00 00 00	r1 = r10
;     void *data_end = (void *)(long)ctx->data_end;
      11:	07 01 00 00 d0 ff ff ff	r1 += -48
      12:	bf a3 00 00 00 00 00 00	r3 = r10
      13:	07 03 00 00 d8 ff ff ff	r3 += -40
; 	nh_type = parse_ethhdr(&nh, data_end, &eth);
      14:	85 10 00 00 ff ff ff ff	call -1
      15:	63 0a cc ff 00 00 00 00	*(u32 *)(r10 - 52) = r0
; 	if (nh_type != bpf_htons(ETH_P_IPV6))
      16:	61 a1 cc ff 00 00 00 00	r1 = *(u32 *)(r10 - 52)
      17:	15 01 04 00 86 dd 00 00	if r1 == 56710 goto +4 <LBB3_2>
      18:	05 00 00 00 00 00 00 00	goto +0 <LBB3_1>

0000000000000098 <LBB3_1>:
      19:	b7 01 00 00 01 00 00 00	r1 = 1
;         return XDP_DROP;
      20:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      21:	05 00 2b 00 00 00 00 00	goto +43 <LBB3_11>

00000000000000b0 <LBB3_2>:
; 	nh_type = parse_ip6hdr(&nh, data_end, &ip6h);
      22:	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 24)
      23:	bf a1 00 00 00 00 00 00	r1 = r10
      24:	07 01 00 00 d0 ff ff ff	r1 += -48
      25:	bf a3 00 00 00 00 00 00	r3 = r10
      26:	07 03 00 00 c0 ff ff ff	r3 += -64
      27:	85 10 00 00 ff ff ff ff	call -1
      28:	63 0a cc ff 00 00 00 00	*(u32 *)(r10 - 52) = r0
; 	if (nh_type != IPPROTO_ICMPV6)
      29:	61 a1 cc ff 00 00 00 00	r1 = *(u32 *)(r10 - 52)
      30:	15 01 04 00 3a 00 00 00	if r1 == 58 goto +4 <LBB3_4>
      31:	05 00 00 00 00 00 00 00	goto +0 <LBB3_3>

0000000000000100 <LBB3_3>:
      32:	b7 01 00 00 01 00 00 00	r1 = 1
; 		return XDP_DROP;
      33:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      34:	05 00 1e 00 00 00 00 00	goto +30 <LBB3_11>

0000000000000118 <LBB3_4>:
; 	nh_type = parse_icmp6hdr(&nh, data_end, &icmp6h);
      35:	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 24)
      36:	bf a1 00 00 00 00 00 00	r1 = r10
      37:	07 01 00 00 d0 ff ff ff	r1 += -48
      38:	bf a3 00 00 00 00 00 00	r3 = r10
      39:	07 03 00 00 b8 ff ff ff	r3 += -72
      40:	85 10 00 00 ff ff ff ff	call -1
      41:	63 0a cc ff 00 00 00 00	*(u32 *)(r10 - 52) = r0
; 	if (nh_type != ICMPV6_ECHO_REQUEST)
      42:	61 a1 cc ff 00 00 00 00	r1 = *(u32 *)(r10 - 52)
      43:	15 01 04 00 80 00 00 00	if r1 == 128 goto +4 <LBB3_6>
      44:	05 00 00 00 00 00 00 00	goto +0 <LBB3_5>

0000000000000168 <LBB3_5>:
      45:	b7 01 00 00 01 00 00 00	r1 = 1
; 		return XDP_DROP;
      46:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      47:	05 00 11 00 00 00 00 00	goto +17 <LBB3_11>

0000000000000180 <LBB3_6>:
      48:	05 00 00 00 00 00 00 00	goto +0 <LBB3_7>

0000000000000188 <LBB3_7>:
; 	if (bpf_ntohs(icmp6h->icmp6_sequence) == 0)
      49:	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 72)
      50:	69 11 06 00 00 00 00 00	r1 = *(u16 *)(r1 + 6)
      51:	dc 01 00 00 10 00 00 00	r1 = be16 r1
      52:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
      53:	05 00 00 00 00 00 00 00	goto +0 <LBB3_8>

00000000000001b0 <LBB3_8>:
      54:	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 80)
      55:	67 01 00 00 20 00 00 00	r1 <<= 32
      56:	77 01 00 00 20 00 00 00	r1 >>= 32
      57:	55 01 04 00 00 00 00 00	if r1 != 0 goto +4 <LBB3_10>
      58:	05 00 00 00 00 00 00 00	goto +0 <LBB3_9>

00000000000001d8 <LBB3_9>:
      59:	b7 01 00 00 01 00 00 00	r1 = 1
; 		return XDP_DROP;
      60:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      61:	05 00 03 00 00 00 00 00	goto +3 <LBB3_11>

00000000000001f0 <LBB3_10>:
      62:	b7 01 00 00 01 00 00 00	r1 = 1
;     return XDP_DROP; // Drop all packets
      63:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      64:	05 00 00 00 00 00 00 00	goto +0 <LBB3_11>

0000000000000208 <LBB3_11>:
; }
      65:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      66:	95 00 00 00 00 00 00 00	exit
