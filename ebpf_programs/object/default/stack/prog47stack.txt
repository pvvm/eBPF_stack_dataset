
ebpf_programs/object/default/prog47.bpf.o:	file format elf64-bpf

Disassembly of section .text:

0000000000000000 <update_info>:
; int update_info (__u64 arrival_time, __u64 finish_time, int key_cpu) {
       0:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
       1:	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r2
       2:	63 3a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r3
;     struct info *value = bpf_map_lookup_elem(&info_array, &key_cpu);
       3:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       5:	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0)
       6:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       8:	bf a2 00 00 00 00 00 00	r2 = r10
       9:	07 02 00 00 e4 ff ff ff	r2 += -28
      10:	8d 00 00 00 03 00 00 00	callx r3
      11:	7b 0a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r0
;     if(!value)
      12:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      13:	55 01 04 00 00 00 00 00	if r1 != 0 goto +4 <LBB0_2>
      14:	05 00 00 00 00 00 00 00	goto +0 <LBB0_1>

0000000000000078 <LBB0_1>:
      15:	b7 01 00 00 00 00 00 00	r1 = 0
;         return 0;
      16:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      17:	05 00 19 00 00 00 00 00	goto +25 <LBB0_3>

0000000000000090 <LBB0_2>:
;     new_value.latency = value->latency + (finish_time - arrival_time);
      18:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      19:	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0)
      20:	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 24)
      21:	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 16)
      22:	1f 32 00 00 00 00 00 00	r2 -= r3
      23:	0f 21 00 00 00 00 00 00	r1 += r2
      24:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
;     new_value.counter = value->counter + 1;
      25:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      26:	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 8)
      27:	07 01 00 00 01 00 00 00	r1 += 1
      28:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     bpf_map_update_elem(&info_array, &key_cpu, &new_value, BPF_ANY);
      29:	18 01 00 00 08 00 00 00 00 00 00 00 00 00 00 00	r1 = 8 ll
      31:	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0)
      32:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      34:	bf a2 00 00 00 00 00 00	r2 = r10
;     new_value.latency = value->latency + (finish_time - arrival_time);
      35:	07 02 00 00 e4 ff ff ff	r2 += -28
      36:	bf a3 00 00 00 00 00 00	r3 = r10
      37:	07 03 00 00 c8 ff ff ff	r3 += -56
      38:	b7 04 00 00 00 00 00 00	r4 = 0
;     bpf_map_update_elem(&info_array, &key_cpu, &new_value, BPF_ANY);
      39:	8d 00 00 00 05 00 00 00	callx r5
      40:	b7 01 00 00 01 00 00 00	r1 = 1
;     return 1;
      41:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      42:	05 00 00 00 00 00 00 00	goto +0 <LBB0_3>

0000000000000158 <LBB0_3>:
; }
      43:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      44:	95 00 00 00 00 00 00 00	exit

0000000000000168 <lookup_map_of_maps_queue>:
; __u64 lookup_map_of_maps_queue (int key, __u64 counter/*, int iteration*/) {
      45:	63 1a f4 ff 00 00 00 00	*(u32 *)(r10 - 12) = r1
      46:	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r2
;     struct inner_map_queue *map = bpf_map_lookup_elem(&outer_map_queue, &key);
      47:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      49:	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0)
      50:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      52:	bf a2 00 00 00 00 00 00	r2 = r10
      53:	07 02 00 00 f4 ff ff ff	r2 += -12
      54:	8d 00 00 00 03 00 00 00	callx r3
      55:	7b 0a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r0
;     if(!map) {
      56:	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 32)
      57:	55 01 04 00 00 00 00 00	if r1 != 0 goto +4 <LBB1_2>
      58:	05 00 00 00 00 00 00 00	goto +0 <LBB1_1>

00000000000001d8 <LBB1_1>:
      59:	b7 01 00 00 00 00 00 00	r1 = 0
;         return 0;
      60:	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r1
      61:	05 00 1c 00 00 00 00 00	goto +28 <LBB1_7>

00000000000001f0 <LBB1_2>:
;     if(bpf_map_peek_elem(map, &value) < 0) {
      62:	18 01 00 00 10 00 00 00 00 00 00 00 00 00 00 00	r1 = 16 ll
      64:	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0)
      65:	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 32)
      66:	bf a2 00 00 00 00 00 00	r2 = r10
      67:	07 02 00 00 d8 ff ff ff	r2 += -40
      68:	8d 00 00 00 03 00 00 00	callx r3
      69:	65 00 04 00 ff ff ff ff	if r0 s> -1 goto +4 <LBB1_4>
      70:	05 00 00 00 00 00 00 00	goto +0 <LBB1_3>

0000000000000238 <LBB1_3>:
      71:	b7 01 00 00 00 00 00 00	r1 = 0
;         return 0;
      72:	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r1
      73:	05 00 10 00 00 00 00 00	goto +16 <LBB1_7>

0000000000000250 <LBB1_4>:
;     if(bpf_map_push_elem(map, &counter, BPF_EXIST) < 0) {
      74:	18 01 00 00 18 00 00 00 00 00 00 00 00 00 00 00	r1 = 24 ll
      76:	79 14 00 00 00 00 00 00	r4 = *(u64 *)(r1 + 0)
      77:	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 32)
      78:	bf a2 00 00 00 00 00 00	r2 = r10
      79:	07 02 00 00 e8 ff ff ff	r2 += -24
      80:	b7 03 00 00 02 00 00 00	r3 = 2
      81:	8d 00 00 00 04 00 00 00	callx r4
      82:	65 00 04 00 ff ff ff ff	if r0 s> -1 goto +4 <LBB1_6>
      83:	05 00 00 00 00 00 00 00	goto +0 <LBB1_5>

00000000000002a0 <LBB1_5>:
      84:	b7 01 00 00 00 00 00 00	r1 = 0
;         return 0;
      85:	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r1
      86:	05 00 03 00 00 00 00 00	goto +3 <LBB1_7>

00000000000002b8 <LBB1_6>:
;     return counter;
      87:	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 24)
      88:	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r1
      89:	05 00 00 00 00 00 00 00	goto +0 <LBB1_7>

00000000000002d0 <LBB1_7>:
; }
      90:	79 a0 f8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 8)
      91:	95 00 00 00 00 00 00 00	exit

00000000000002e0 <get_counter>:
; __u64 get_counter (int key_cpu) {
      92:	63 1a f4 ff 00 00 00 00	*(u32 *)(r10 - 12) = r1
;     struct info *value = bpf_map_lookup_elem(&info_array, &key_cpu);
      93:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      95:	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0)
      96:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      98:	bf a2 00 00 00 00 00 00	r2 = r10
      99:	07 02 00 00 f4 ff ff ff	r2 += -12
     100:	8d 00 00 00 03 00 00 00	callx r3
     101:	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r0
;     if(!value)
     102:	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 24)
     103:	55 01 04 00 00 00 00 00	if r1 != 0 goto +4 <LBB2_2>
     104:	05 00 00 00 00 00 00 00	goto +0 <LBB2_1>

0000000000000348 <LBB2_1>:
     105:	b7 01 00 00 00 00 00 00	r1 = 0
;         return 0;
     106:	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r1
     107:	05 00 04 00 00 00 00 00	goto +4 <LBB2_3>

0000000000000360 <LBB2_2>:
;     return value->counter;
     108:	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 24)
     109:	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 8)
     110:	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r1
     111:	05 00 00 00 00 00 00 00	goto +0 <LBB2_3>

0000000000000380 <LBB2_3>:
; }
     112:	79 a0 f8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 8)
     113:	95 00 00 00 00 00 00 00	exit

Disassembly of section xdp:

0000000000000000 <map_of_maps_queue>:
; {
       0:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
;     __u32 cpu = bpf_get_smp_processor_id();
       1:	18 01 00 00 20 00 00 00 00 00 00 00 00 00 00 00	r1 = 32 ll
       3:	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0)
       4:	8d 00 00 00 01 00 00 00	callx r1
       5:	63 0a ec ff 00 00 00 00	*(u32 *)(r10 - 20) = r0
;     __u64 counter = get_counter(cpu);
       6:	61 a1 ec ff 00 00 00 00	r1 = *(u32 *)(r10 - 20)
       7:	85 10 00 00 ff ff ff ff	call -1
       8:	7b 0a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r0
;     __u64 arrival_time = bpf_ktime_get_ns();
       9:	18 01 00 00 28 00 00 00 00 00 00 00 00 00 00 00	r1 = 40 ll
      11:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
      12:	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0)
      13:	8d 00 00 00 01 00 00 00	callx r1
      14:	7b 0a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r0
;     lookup_map_of_maps_queue(cpu, counter);
      15:	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 32)
      16:	61 a1 ec ff 00 00 00 00	r1 = *(u32 *)(r10 - 20)
      17:	85 10 00 00 ff ff ff ff	call -1
      18:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     __u64 finish_time = bpf_ktime_get_ns();
      19:	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0)
      20:	8d 00 00 00 01 00 00 00	callx r1
      21:	7b 0a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r0
;     if(!update_info(arrival_time, finish_time, cpu)) {
      22:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      23:	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 48)
      24:	61 a3 ec ff 00 00 00 00	r3 = *(u32 *)(r10 - 20)
      25:	85 10 00 00 ff ff ff ff	call -1
      26:	bf 01 00 00 00 00 00 00	r1 = r0
      27:	67 01 00 00 20 00 00 00	r1 <<= 32
      28:	77 01 00 00 20 00 00 00	r1 >>= 32
      29:	55 01 04 00 00 00 00 00	if r1 != 0 goto +4 <LBB3_2>
      30:	05 00 00 00 00 00 00 00	goto +0 <LBB3_1>

00000000000000f8 <LBB3_1>:
      31:	b7 01 00 00 01 00 00 00	r1 = 1
;         return XDP_DROP;
      32:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      33:	05 00 03 00 00 00 00 00	goto +3 <LBB3_3>

0000000000000110 <LBB3_2>:
      34:	b7 01 00 00 01 00 00 00	r1 = 1
;     return XDP_DROP;
      35:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      36:	05 00 00 00 00 00 00 00	goto +0 <LBB3_3>

0000000000000128 <LBB3_3>:
; }
      37:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      38:	95 00 00 00 00 00 00 00	exit
