
ebpf_programs/object/default/prog28.bpf.o:	file format elf64-bpf

Disassembly of section .text:

0000000000000000 <check_helper>:
; __u8 check_helper(__u32 value, __u16 auxiliar) {
       0:	63 1a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r1
       1:	6b 2a f6 ff 00 00 00 00	*(u16 *)(r10 - 10) = r2
;     if(value > auxiliar)
       2:	61 a2 f8 ff 00 00 00 00	r2 = *(u32 *)(r10 - 8)
       3:	69 a1 f6 ff 00 00 00 00	r1 = *(u16 *)(r10 - 10)
       4:	3d 21 04 00 00 00 00 00	if r1 >= r2 goto +4 <LBB0_2>
       5:	05 00 00 00 00 00 00 00	goto +0 <LBB0_1>

0000000000000030 <LBB0_1>:
       6:	b7 01 00 00 01 00 00 00	r1 = 1
;         return 1;
       7:	73 1a ff ff 00 00 00 00	*(u8 *)(r10 - 1) = r1
       8:	05 00 03 00 00 00 00 00	goto +3 <LBB0_3>

0000000000000048 <LBB0_2>:
       9:	b7 01 00 00 00 00 00 00	r1 = 0
;         return 0;
      10:	73 1a ff ff 00 00 00 00	*(u8 *)(r10 - 1) = r1
      11:	05 00 00 00 00 00 00 00	goto +0 <LBB0_3>

0000000000000060 <LBB0_3>:
; }
      12:	71 a0 ff ff 00 00 00 00	r0 = *(u8 *)(r10 - 1)
      13:	95 00 00 00 00 00 00 00	exit

0000000000000070 <helping_hand>:
; __u32 helping_hand(__u32 value, __u16 auxiliar) {
      14:	63 1a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r1
      15:	6b 2a f6 ff 00 00 00 00	*(u16 *)(r10 - 10) = r2
;     value = value + auxiliar;
      16:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
      17:	69 a2 f6 ff 00 00 00 00	r2 = *(u16 *)(r10 - 10)
      18:	0f 21 00 00 00 00 00 00	r1 += r2
      19:	63 1a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r1
;     __u8 returned = check_helper(value, auxiliar);
      20:	69 a2 f6 ff 00 00 00 00	r2 = *(u16 *)(r10 - 10)
      21:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
      22:	85 10 00 00 ff ff ff ff	call -1
      23:	73 0a f5 ff 00 00 00 00	*(u8 *)(r10 - 11) = r0
;     if(returned)
      24:	71 a1 f5 ff 00 00 00 00	r1 = *(u8 *)(r10 - 11)
      25:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB1_2>
      26:	05 00 00 00 00 00 00 00	goto +0 <LBB1_1>

00000000000000d8 <LBB1_1>:
;         return value - auxiliar;
      27:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
      28:	69 a2 f6 ff 00 00 00 00	r2 = *(u16 *)(r10 - 10)
      29:	1f 21 00 00 00 00 00 00	r1 -= r2
      30:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      31:	05 00 03 00 00 00 00 00	goto +3 <LBB1_3>

0000000000000100 <LBB1_2>:
;         return value;
      32:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
      33:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      34:	05 00 00 00 00 00 00 00	goto +0 <LBB1_3>

0000000000000118 <LBB1_3>:
; }
      35:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      36:	95 00 00 00 00 00 00 00	exit

Disassembly of section xdp:

0000000000000000 <xdp_prog>:
; int xdp_prog(struct xdp_md *ctx) {
       0:	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r1
       1:	b7 01 00 00 01 00 00 00	r1 = 1
;     __u32 value = 1;
       2:	63 1a f4 ff 00 00 00 00	*(u32 *)(r10 - 12) = r1
;     value = helping_hand(value, 25);
       3:	61 a1 f4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 12)
       4:	b7 02 00 00 19 00 00 00	r2 = 25
       5:	85 10 00 00 ff ff ff ff	call -1
       6:	63 0a f4 ff 00 00 00 00	*(u32 *)(r10 - 12) = r0
;     __u32 data_start = ctx->data;
       7:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
       8:	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0)
       9:	63 1a f0 ff 00 00 00 00	*(u32 *)(r10 - 16) = r1
;     __u32 data_end = ctx->data_end;
      10:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
      11:	61 11 04 00 00 00 00 00	r1 = *(u32 *)(r1 + 4)
      12:	63 1a ec ff 00 00 00 00	*(u32 *)(r10 - 20) = r1
;     if(data_end > data_start && value) {
      13:	61 a2 ec ff 00 00 00 00	r2 = *(u32 *)(r10 - 20)
      14:	61 a1 f0 ff 00 00 00 00	r1 = *(u32 *)(r10 - 16)
      15:	3d 21 0a 00 00 00 00 00	if r1 >= r2 goto +10 <LBB2_3>
      16:	05 00 00 00 00 00 00 00	goto +0 <LBB2_1>

0000000000000088 <LBB2_1>:
      17:	61 a1 f4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 12)
      18:	15 01 07 00 00 00 00 00	if r1 == 0 goto +7 <LBB2_3>
      19:	05 00 00 00 00 00 00 00	goto +0 <LBB2_2>

00000000000000a0 <LBB2_2>:
;         check_helper(value, value - 1);
      20:	61 a1 f4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 12)
      21:	bf 12 00 00 00 00 00 00	r2 = r1
      22:	07 02 00 00 ff ff ff ff	r2 += -1
      23:	57 02 00 00 ff ff 00 00	r2 &= 65535
      24:	85 10 00 00 ff ff ff ff	call -1
;     }
      25:	05 00 00 00 00 00 00 00	goto +0 <LBB2_3>

00000000000000d0 <LBB2_3>:
      26:	b7 00 00 00 01 00 00 00	r0 = 1
;     return XDP_DROP; // Drop all packets
      27:	95 00 00 00 00 00 00 00	exit
