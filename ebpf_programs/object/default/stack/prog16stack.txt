
ebpf_programs/object/default/prog16.bpf.o:	file format elf64-bpf

Disassembly of section xdp:

0000000000000000 <xdp_prog>:
; int xdp_prog(struct xdp_md *ctx) {
       0:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
       1:	b7 01 00 00 01 00 00 00	r1 = 1
;     __u32 this = 1;
       2:	63 1a ec ff 00 00 00 00	*(u32 *)(r10 - 20) = r1
       3:	b7 02 00 00 00 00 00 00	r2 = 0
;     __u8 value = 0;
       4:	73 2a eb ff 00 00 00 00	*(u8 *)(r10 - 21) = r2
       5:	b7 02 00 00 06 00 00 00	r2 = 6
;     __u8 you_are_cool = 1 + 5;
       6:	73 2a ea ff 00 00 00 00	*(u8 *)(r10 - 22) = r2
;     __u16 trying12 = 1;
       7:	6b 1a e8 ff 00 00 00 00	*(u16 *)(r10 - 24) = r1
;     this += -1;
       8:	61 a1 ec ff 00 00 00 00	r1 = *(u32 *)(r10 - 20)
       9:	07 01 00 00 ff ff ff ff	r1 += -1
      10:	63 1a ec ff 00 00 00 00	*(u32 *)(r10 - 20) = r1
;     __u32 data_start = ctx->data;
      11:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
      12:	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0)
      13:	63 1a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r1
;     __u32 data_end = ctx->data_end;
      14:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
      15:	61 11 04 00 00 00 00 00	r1 = *(u32 *)(r1 + 4)
      16:	63 1a e0 ff 00 00 00 00	*(u32 *)(r10 - 32) = r1
;     if(data_end < data_start)
      17:	61 a1 e0 ff 00 00 00 00	r1 = *(u32 *)(r10 - 32)
      18:	61 a2 e4 ff 00 00 00 00	r2 = *(u32 *)(r10 - 28)
      19:	3d 21 04 00 00 00 00 00	if r1 >= r2 goto +4 <LBB0_2>
      20:	05 00 00 00 00 00 00 00	goto +0 <LBB0_1>

00000000000000a8 <LBB0_1>:
      21:	b7 01 00 00 01 00 00 00	r1 = 1
;         return XDP_DROP;
      22:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      23:	05 00 2a 00 00 00 00 00	goto +42 <LBB0_10>

00000000000000c0 <LBB0_2>:
;     struct xdp_md *copy = ctx;
      24:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
      25:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
;     __u32 rx_index = copy->rx_queue_index;
      26:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      27:	61 11 10 00 00 00 00 00	r1 = *(u32 *)(r1 + 16)
      28:	63 1a d4 ff 00 00 00 00	*(u32 *)(r10 - 44) = r1
;     if(you_are_cool > value) {
      29:	71 a2 ea ff 00 00 00 00	r2 = *(u8 *)(r10 - 22)
      30:	71 a1 eb ff 00 00 00 00	r1 = *(u8 *)(r10 - 21)
      31:	7d 21 09 00 00 00 00 00	if r1 s>= r2 goto +9 <LBB0_4>
      32:	05 00 00 00 00 00 00 00	goto +0 <LBB0_3>

0000000000000108 <LBB0_3>:
;         str_inst_2.hello = this;
      33:	61 a1 ec ff 00 00 00 00	r1 = *(u32 *)(r10 - 20)
      34:	73 1a c0 ff 00 00 00 00	*(u8 *)(r10 - 64) = r1
;         str_inst_2.trying_out = trying12 * 1000;
      35:	69 a1 e8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 24)
      36:	27 01 00 00 e8 03 00 00	r1 *= 1000
      37:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
      38:	b7 01 00 00 02 00 00 00	r1 = 2
;         return XDP_PASS;
      39:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      40:	05 00 19 00 00 00 00 00	goto +25 <LBB0_10>

0000000000000148 <LBB0_4>:
;     } else if(this && (1 || trying12)) {
      41:	61 a1 ec ff 00 00 00 00	r1 = *(u32 *)(r10 - 20)
      42:	15 01 0d 00 00 00 00 00	if r1 == 0 goto +13 <LBB0_6>
      43:	05 00 00 00 00 00 00 00	goto +0 <LBB0_5>

0000000000000160 <LBB0_5>:
;         this *= 12;
      44:	61 a1 ec ff 00 00 00 00	r1 = *(u32 *)(r10 - 20)
      45:	27 01 00 00 0c 00 00 00	r1 *= 12
      46:	63 1a ec ff 00 00 00 00	*(u32 *)(r10 - 20) = r1
;         struct_instance.amem = value;
      47:	71 a1 eb ff 00 00 00 00	r1 = *(u8 *)(r10 - 21)
      48:	63 1a b0 ff 00 00 00 00	*(u32 *)(r10 - 80) = r1
;         struct_instance.example = struct_instance.amem * this;
      49:	61 a1 b0 ff 00 00 00 00	r1 = *(u32 *)(r10 - 80)
      50:	61 a2 ec ff 00 00 00 00	r2 = *(u32 *)(r10 - 20)
      51:	2f 21 00 00 00 00 00 00	r1 *= r2
      52:	67 01 00 00 20 00 00 00	r1 <<= 32
      53:	77 01 00 00 20 00 00 00	r1 >>= 32
      54:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
;     }
      55:	05 00 00 00 00 00 00 00	goto +0 <LBB0_6>

00000000000001c0 <LBB0_6>:
      56:	05 00 00 00 00 00 00 00	goto +0 <LBB0_7>

00000000000001c8 <LBB0_7>:
;     if(rx_index != 0)
      57:	61 a1 d4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 44)
      58:	15 01 04 00 00 00 00 00	if r1 == 0 goto +4 <LBB0_9>
      59:	05 00 00 00 00 00 00 00	goto +0 <LBB0_8>

00000000000001e0 <LBB0_8>:
      60:	b7 01 00 00 00 00 00 00	r1 = 0
;         this = 0;
      61:	63 1a ec ff 00 00 00 00	*(u32 *)(r10 - 20) = r1
      62:	05 00 00 00 00 00 00 00	goto +0 <LBB0_9>

00000000000001f8 <LBB0_9>:
      63:	b7 01 00 00 01 00 00 00	r1 = 1
;     return XDP_DROP; // Drop all packets
      64:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      65:	05 00 00 00 00 00 00 00	goto +0 <LBB0_10>

0000000000000210 <LBB0_10>:
; }
      66:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      67:	95 00 00 00 00 00 00 00	exit
