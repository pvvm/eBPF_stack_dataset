
ebpf_programs/object/default/prog32.bpf.o:	file format elf64-bpf

Disassembly of section .text:

0000000000000000 <updating_map>:
; void updating_map(__u32 *value, struct value *value2) {
       0:	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r1
       1:	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r2
;     *value = *value + 1;
       2:	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 8)
       3:	61 21 00 00 00 00 00 00	r1 = *(u32 *)(r2 + 0)
       4:	07 01 00 00 01 00 00 00	r1 += 1
       5:	63 12 00 00 00 00 00 00	*(u32 *)(r2 + 0) = r1
;     value2->testing = *value;
       6:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
       7:	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0)
       8:	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 16)
       9:	63 12 00 00 00 00 00 00	*(u32 *)(r2 + 0) = r1
;     value2->testing2 = value2->testing * (*value);
      10:	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 16)
      11:	61 21 00 00 00 00 00 00	r1 = *(u32 *)(r2 + 0)
      12:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      13:	61 33 00 00 00 00 00 00	r3 = *(u32 *)(r3 + 0)
      14:	2f 31 00 00 00 00 00 00	r1 *= r3
      15:	63 12 04 00 00 00 00 00	*(u32 *)(r2 + 4) = r1
; }
      16:	95 00 00 00 00 00 00 00	exit

Disassembly of section xdp:

0000000000000000 <xdp_prog>:
; int xdp_prog(struct xdp_md *ctx) {
       0:	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r1
;     __u32 data_start = ctx->data;
       1:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
       2:	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0)
       3:	63 1a f4 ff 00 00 00 00	*(u32 *)(r10 - 12) = r1
;     __u32 data_end = ctx->data_end;
       4:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
       5:	61 11 04 00 00 00 00 00	r1 = *(u32 *)(r1 + 4)
       6:	63 1a f0 ff 00 00 00 00	*(u32 *)(r10 - 16) = r1
;     if(data_end > data_start) {
       7:	61 a2 f0 ff 00 00 00 00	r2 = *(u32 *)(r10 - 16)
       8:	61 a1 f4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 12)
       9:	3d 21 19 00 00 00 00 00	if r1 >= r2 goto +25 <LBB1_2>
      10:	05 00 00 00 00 00 00 00	goto +0 <LBB1_1>

0000000000000058 <LBB1_1>:
      11:	b7 01 00 00 00 00 00 00	r1 = 0
;         __u32 key = 0;
      12:	63 1a ec ff 00 00 00 00	*(u32 *)(r10 - 20) = r1
;         __u32* value = bpf_map_lookup_elem(&xdp_map, &key);
      13:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      15:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
      16:	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0)
      17:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      19:	bf a2 00 00 00 00 00 00	r2 = r10
;         __u32 key = 0;
      20:	07 02 00 00 ec ff ff ff	r2 += -20
;         __u32* value = bpf_map_lookup_elem(&xdp_map, &key);
      21:	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r2
      22:	8d 00 00 00 03 00 00 00	callx r3
      23:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
      24:	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 48)
      25:	7b 0a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r0
;         struct value *value2 = bpf_map_lookup_elem(&map_value, &key);
      26:	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0)
      27:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      29:	8d 00 00 00 03 00 00 00	callx r3
      30:	7b 0a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r0
;         updating_map(value, value2);
      31:	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 32)
      32:	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 40)
      33:	85 10 00 00 ff ff ff ff	call -1
;     }
      34:	05 00 00 00 00 00 00 00	goto +0 <LBB1_2>

0000000000000118 <LBB1_2>:
      35:	b7 00 00 00 01 00 00 00	r0 = 1
;     return XDP_DROP; // Drop all packets
      36:	95 00 00 00 00 00 00 00	exit
