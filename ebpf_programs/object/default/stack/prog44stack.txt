
ebpf_programs/object/default/prog44.bpf.o:	file format elf64-bpf

Disassembly of section xdp:

0000000000000000 <xdp_prog>:
; {
       0:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
; 	int index = ctx->rx_queue_index;
       1:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
       2:	61 11 10 00 00 00 00 00	r1 = *(u32 *)(r1 + 16)
       3:	63 1a ec ff 00 00 00 00	*(u32 *)(r10 - 20) = r1
; 	pkt_count = bpf_map_lookup_elem(&xdp_stats_map, &index);
       4:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       6:	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0)
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	bf a2 00 00 00 00 00 00	r2 = r10
; 	int index = ctx->rx_queue_index;
      10:	07 02 00 00 ec ff ff ff	r2 += -20
; 	pkt_count = bpf_map_lookup_elem(&xdp_stats_map, &index);
      11:	8d 00 00 00 03 00 00 00	callx r3
      12:	7b 0a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r0
; 	if (pkt_count) {
      13:	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 32)
      14:	15 01 0d 00 00 00 00 00	if r1 == 0 goto +13 <LBB0_4>
      15:	05 00 00 00 00 00 00 00	goto +0 <LBB0_1>

0000000000000080 <LBB0_1>:
; 		if ((*pkt_count)++ & 1)
      16:	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 32)
      17:	61 31 00 00 00 00 00 00	r1 = *(u32 *)(r3 + 0)
      18:	bf 12 00 00 00 00 00 00	r2 = r1
      19:	07 02 00 00 01 00 00 00	r2 += 1
      20:	63 23 00 00 00 00 00 00	*(u32 *)(r3 + 0) = r2
      21:	57 01 00 00 01 00 00 00	r1 &= 1
      22:	15 01 04 00 00 00 00 00	if r1 == 0 goto +4 <LBB0_3>
      23:	05 00 00 00 00 00 00 00	goto +0 <LBB0_2>

00000000000000c0 <LBB0_2>:
      24:	b7 01 00 00 02 00 00 00	r1 = 2
; 		return XDP_PASS;
      25:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      26:	05 00 18 00 00 00 00 00	goto +24 <LBB0_7>

00000000000000d8 <LBB0_3>:
; 	}
      27:	05 00 00 00 00 00 00 00	goto +0 <LBB0_4>

00000000000000e0 <LBB0_4>:
; 	if (bpf_map_lookup_elem(&xsks_map, &index))
      28:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      30:	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0)
      31:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      33:	bf a2 00 00 00 00 00 00	r2 = r10
      34:	07 02 00 00 ec ff ff ff	r2 += -20
      35:	8d 00 00 00 03 00 00 00	callx r3
      36:	15 00 0b 00 00 00 00 00	if r0 == 0 goto +11 <LBB0_6>
      37:	05 00 00 00 00 00 00 00	goto +0 <LBB0_5>

0000000000000130 <LBB0_5>:
; 		return bpf_redirect_map(&xsks_map, index, 0);
      38:	18 01 00 00 08 00 00 00 00 00 00 00 00 00 00 00	r1 = 8 ll
      40:	79 14 00 00 00 00 00 00	r4 = *(u64 *)(r1 + 0)
      41:	61 a2 ec ff 00 00 00 00	r2 = *(u32 *)(r10 - 20)
      42:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      44:	b7 03 00 00 00 00 00 00	r3 = 0
      45:	8d 00 00 00 04 00 00 00	callx r4
      46:	63 0a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r0
      47:	05 00 03 00 00 00 00 00	goto +3 <LBB0_7>

0000000000000180 <LBB0_6>:
      48:	b7 01 00 00 02 00 00 00	r1 = 2
; 	return XDP_PASS;
      49:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      50:	05 00 00 00 00 00 00 00	goto +0 <LBB0_7>

0000000000000198 <LBB0_7>:
; }
      51:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      52:	95 00 00 00 00 00 00 00	exit
