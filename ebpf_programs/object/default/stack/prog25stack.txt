
ebpf_programs/object/default/prog25.bpf.o:	file format elf64-bpf

Disassembly of section .text:

0000000000000000 <function4>:
; __u32 function4(__u16 trying) {
       0:	6b 1a fa ff 00 00 00 00	*(u16 *)(r10 - 6) = r1
;     if(trying < 10) {
       1:	69 a1 fa ff 00 00 00 00	r1 = *(u16 *)(r10 - 6)
       2:	65 01 04 00 09 00 00 00	if r1 s> 9 goto +4 <LBB0_2>
       3:	05 00 00 00 00 00 00 00	goto +0 <LBB0_1>

0000000000000020 <LBB0_1>:
;         return trying;
       4:	69 a1 fa ff 00 00 00 00	r1 = *(u16 *)(r10 - 6)
       5:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
       6:	05 00 03 00 00 00 00 00	goto +3 <LBB0_3>

0000000000000038 <LBB0_2>:
       7:	b7 01 00 00 00 00 00 00	r1 = 0
;     return 0;
       8:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
       9:	05 00 00 00 00 00 00 00	goto +0 <LBB0_3>

0000000000000050 <LBB0_3>:
; }
      10:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      11:	95 00 00 00 00 00 00 00	exit

0000000000000060 <helping>:
; __u32 helping(__u32 value) {
      12:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
;     value = value + 1;
      13:	61 a1 fc ff 00 00 00 00	r1 = *(u32 *)(r10 - 4)
      14:	07 01 00 00 01 00 00 00	r1 += 1
      15:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      16:	b7 01 00 00 01 00 00 00	r1 = 1
;     __u8 afago = 1;
      17:	73 1a fb ff 00 00 00 00	*(u8 *)(r10 - 5) = r1
;     if(afago)
      18:	71 a1 fb ff 00 00 00 00	r1 = *(u8 *)(r10 - 5)
      19:	15 01 04 00 00 00 00 00	if r1 == 0 goto +4 <LBB1_2>
      20:	05 00 00 00 00 00 00 00	goto +0 <LBB1_1>

00000000000000a8 <LBB1_1>:
;         argument = afago;
      21:	71 a1 fb ff 00 00 00 00	r1 = *(u8 *)(r10 - 5)
      22:	63 1a f4 ff 00 00 00 00	*(u32 *)(r10 - 12) = r1
      23:	05 00 03 00 00 00 00 00	goto +3 <LBB1_3>

00000000000000c0 <LBB1_2>:
;         argument = value;
      24:	61 a1 fc ff 00 00 00 00	r1 = *(u32 *)(r10 - 4)
      25:	63 1a f4 ff 00 00 00 00	*(u32 *)(r10 - 12) = r1
      26:	05 00 00 00 00 00 00 00	goto +0 <LBB1_3>

00000000000000d8 <LBB1_3>:
;     function4(argument);
      27:	61 a1 f4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 12)
      28:	57 01 00 00 ff ff 00 00	r1 &= 65535
      29:	85 10 00 00 ff ff ff ff	call -1
;     return value;
      30:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      31:	95 00 00 00 00 00 00 00	exit

0000000000000100 <function2>:
; __u32 function2(__u32 value) {
      32:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
;     value = value + 1;
      33:	61 a1 fc ff 00 00 00 00	r1 = *(u32 *)(r10 - 4)
      34:	07 01 00 00 01 00 00 00	r1 += 1
      35:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      36:	b7 01 00 00 05 00 00 00	r1 = 5
;     __u16 roedor = 5;
      37:	6b 1a fa ff 00 00 00 00	*(u16 *)(r10 - 6) = r1
;     value = roedor + 1;
      38:	69 a1 fa ff 00 00 00 00	r1 = *(u16 *)(r10 - 6)
      39:	07 01 00 00 01 00 00 00	r1 += 1
      40:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
;     helping(value);
      41:	61 a1 fc ff 00 00 00 00	r1 = *(u32 *)(r10 - 4)
      42:	85 10 00 00 ff ff ff ff	call -1
;     function4(roedor);
      43:	69 a1 fa ff 00 00 00 00	r1 = *(u16 *)(r10 - 6)
      44:	85 10 00 00 ff ff ff ff	call -1
;     return value;
      45:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      46:	95 00 00 00 00 00 00 00	exit

0000000000000178 <function1>:
; __u32 function1(__u32 value) {
      47:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      48:	b7 01 00 00 02 00 00 00	r1 = 2
;     __u8 xandao = 2;
      49:	73 1a fb ff 00 00 00 00	*(u8 *)(r10 - 5) = r1
;     value = value + 1;
      50:	61 a1 fc ff 00 00 00 00	r1 = *(u32 *)(r10 - 4)
      51:	07 01 00 00 01 00 00 00	r1 += 1
      52:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
;     function2(value);
      53:	61 a1 fc ff 00 00 00 00	r1 = *(u32 *)(r10 - 4)
      54:	85 10 00 00 ff ff ff ff	call -1
;     return xandao;
      55:	71 a0 fb ff 00 00 00 00	r0 = *(u8 *)(r10 - 5)
      56:	95 00 00 00 00 00 00 00	exit

Disassembly of section xdp:

0000000000000000 <xdp_prog>:
; int xdp_prog(struct xdp_md *ctx) {
       0:	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r1
       1:	b7 01 00 00 01 00 00 00	r1 = 1
;     __u32 value = 1;
       2:	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r1
       3:	63 1a f4 ff 00 00 00 00	*(u32 *)(r10 - 12) = r1
;     function1(value);
       4:	61 a1 f4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 12)
       5:	85 10 00 00 ff ff ff ff	call -1
;     return XDP_DROP; // Drop all packets
       6:	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 24)
       7:	95 00 00 00 00 00 00 00	exit
