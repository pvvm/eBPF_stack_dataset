
ebpf_programs/object/default/prog40.bpf.o:	file format elf64-bpf

Disassembly of section xdp:

0000000000000000 <xdp_prog>:
; int xdp_prog(struct xdp_md *ctx) {
       0:	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r1
;     void *data_end = (void *)(long)ctx->data_end;
       1:	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 96)
       2:	61 11 04 00 00 00 00 00	r1 = *(u32 *)(r1 + 4)
       3:	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r1
; 	void *data = (void *)(long)ctx->data;
       4:	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 96)
       5:	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0)
       6:	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 112) = r1
; 	nh.pos = data;
       7:	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 112)
       8:	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 128) = r1
; 	nh_type = parse_ethhdr(&nh, data_end, &eth);
       9:	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 104)
      10:	bf a2 00 00 00 00 00 00	r2 = r10
;     void *data_end = (void *)(long)ctx->data_end;
      11:	07 02 00 00 80 ff ff ff	r2 += -128
      12:	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r2
      13:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
      14:	bf a1 00 00 00 00 00 00	r1 = r10
      15:	07 01 00 00 88 ff ff ff	r1 += -120
      16:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
; struct ethhdr *eth = nh->pos;
      17:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
      18:	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0)
      19:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
      20:	b7 01 00 00 0e 00 00 00	r1 = 14
; int hdrsize = sizeof(*eth);
      21:	63 1a ac ff 00 00 00 00	*(u32 *)(r10 - 84) = r1
; if (nh->pos + 1 > data_end)
      22:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
      23:	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0)
      24:	07 02 00 00 01 00 00 00	r2 += 1
      25:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
      26:	3d 21 05 00 00 00 00 00	if r1 >= r2 goto +5 <LBB0_2>
      27:	05 00 00 00 00 00 00 00	goto +0 <LBB0_1>

00000000000000e0 <LBB0_1>:
      28:	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 4294967295 ll
; return -1;
      30:	63 1a d0 ff 00 00 00 00	*(u32 *)(r10 - 48) = r1
      31:	05 00 11 00 00 00 00 00	goto +17 <LBB0_3>

0000000000000100 <LBB0_2>:
; nh->pos += hdrsize;
      32:	61 a3 ac ff 00 00 00 00	r3 = *(u32 *)(r10 - 84)
      33:	67 03 00 00 20 00 00 00	r3 <<= 32
      34:	c7 03 00 00 20 00 00 00	r3 s>>= 32
      35:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
      36:	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0)
      37:	0f 31 00 00 00 00 00 00	r1 += r3
      38:	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0) = r1
; *ethhdr = eth;
      39:	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 80)
      40:	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 72)
      41:	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0) = r1
; return eth->h_proto;
      42:	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 80)
      43:	71 12 0c 00 00 00 00 00	r2 = *(u8 *)(r1 + 12)
      44:	71 11 0d 00 00 00 00 00	r1 = *(u8 *)(r1 + 13)
      45:	67 01 00 00 08 00 00 00	r1 <<= 8
      46:	4f 21 00 00 00 00 00 00	r1 |= r2
      47:	63 1a d0 ff 00 00 00 00	*(u32 *)(r10 - 48) = r1
      48:	05 00 00 00 00 00 00 00	goto +0 <LBB0_3>

0000000000000188 <LBB0_3>:
; }
      49:	61 a1 d0 ff 00 00 00 00	r1 = *(u32 *)(r10 - 48)
; 	nh_type = parse_ethhdr(&nh, data_end, &eth);
      50:	63 1a 7c ff 00 00 00 00	*(u32 *)(r10 - 132) = r1
; 	if (nh_type != bpf_htons(ETH_P_IPV6))
      51:	61 a1 7c ff 00 00 00 00	r1 = *(u32 *)(r10 - 132)
      52:	15 01 04 00 86 dd 00 00	if r1 == 56710 goto +4 <LBB0_5>
      53:	05 00 00 00 00 00 00 00	goto +0 <LBB0_4>

00000000000001b0 <LBB0_4>:
      54:	b7 01 00 00 01 00 00 00	r1 = 1
;         return XDP_DROP;
      55:	63 1a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r1
      56:	05 00 48 00 00 00 00 00	goto +72 <LBB0_15>

00000000000001c8 <LBB0_5>:
; 		nh_type = parse_iphdr(&nh, data_end, &iph);
      57:	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 104)
      58:	bf a2 00 00 00 00 00 00	r2 = r10
      59:	07 02 00 00 80 ff ff ff	r2 += -128
      60:	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r2
      61:	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r1
      62:	bf a1 00 00 00 00 00 00	r1 = r10
      63:	07 01 00 00 70 ff ff ff	r1 += -144
      64:	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r1
; struct iphdr *iph = nh->pos;
      65:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
      66:	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0)
      67:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
; if (iph + 1 > data_end)
      68:	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 40)
      69:	07 02 00 00 14 00 00 00	r2 += 20
      70:	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 24)
      71:	3d 21 05 00 00 00 00 00	if r1 >= r2 goto +5 <LBB0_7>
      72:	05 00 00 00 00 00 00 00	goto +0 <LBB0_6>

0000000000000248 <LBB0_6>:
      73:	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 4294967295 ll
; return -1;
      75:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      76:	05 00 29 00 00 00 00 00	goto +41 <LBB0_12>

0000000000000268 <LBB0_7>:
; hdrsize = iph->ihl * 4;
      77:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      78:	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0)
      79:	57 01 00 00 0f 00 00 00	r1 &= 15
      80:	67 01 00 00 02 00 00 00	r1 <<= 2
      81:	63 1a d4 ff 00 00 00 00	*(u32 *)(r10 - 44) = r1
; if(hdrsize < sizeof(*iph))
      82:	61 a1 d4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 44)
      83:	67 01 00 00 20 00 00 00	r1 <<= 32
      84:	c7 01 00 00 20 00 00 00	r1 s>>= 32
      85:	25 01 05 00 13 00 00 00	if r1 > 19 goto +5 <LBB0_9>
      86:	05 00 00 00 00 00 00 00	goto +0 <LBB0_8>

00000000000002b8 <LBB0_8>:
      87:	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 4294967295 ll
; return -1;
      89:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      90:	05 00 1b 00 00 00 00 00	goto +27 <LBB0_12>

00000000000002d8 <LBB0_9>:
; if (nh->pos + hdrsize > data_end)
      91:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
      92:	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0)
      93:	61 a1 d4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 44)
      94:	67 01 00 00 20 00 00 00	r1 <<= 32
      95:	c7 01 00 00 20 00 00 00	r1 s>>= 32
      96:	0f 12 00 00 00 00 00 00	r2 += r1
      97:	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 24)
      98:	3d 21 05 00 00 00 00 00	if r1 >= r2 goto +5 <LBB0_11>
      99:	05 00 00 00 00 00 00 00	goto +0 <LBB0_10>

0000000000000320 <LBB0_10>:
     100:	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 4294967295 ll
; return -1;
     102:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
     103:	05 00 0e 00 00 00 00 00	goto +14 <LBB0_12>

0000000000000340 <LBB0_11>:
; nh->pos += hdrsize;
     104:	61 a3 d4 ff 00 00 00 00	r3 = *(u32 *)(r10 - 44)
     105:	67 03 00 00 20 00 00 00	r3 <<= 32
     106:	c7 03 00 00 20 00 00 00	r3 s>>= 32
     107:	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 16)
     108:	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0)
     109:	0f 31 00 00 00 00 00 00	r1 += r3
     110:	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0) = r1
; *iphdr = iph;
     111:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
     112:	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 32)
     113:	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0) = r1
; return iph->protocol;
     114:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
     115:	71 11 09 00 00 00 00 00	r1 = *(u8 *)(r1 + 9)
     116:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
     117:	05 00 00 00 00 00 00 00	goto +0 <LBB0_12>

00000000000003b0 <LBB0_12>:
; }
     118:	61 a1 fc ff 00 00 00 00	r1 = *(u32 *)(r10 - 4)
; 		nh_type = parse_iphdr(&nh, data_end, &iph);
     119:	63 1a 7c ff 00 00 00 00	*(u32 *)(r10 - 132) = r1
; 		if (nh_type != 0)
     120:	61 a1 7c ff 00 00 00 00	r1 = *(u32 *)(r10 - 132)
     121:	15 01 04 00 00 00 00 00	if r1 == 0 goto +4 <LBB0_14>
     122:	05 00 00 00 00 00 00 00	goto +0 <LBB0_13>

00000000000003d8 <LBB0_13>:
     123:	b7 01 00 00 01 00 00 00	r1 = 1
; 			return XDP_DROP;
     124:	63 1a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r1
     125:	05 00 03 00 00 00 00 00	goto +3 <LBB0_15>

00000000000003f0 <LBB0_14>:
     126:	b7 01 00 00 01 00 00 00	r1 = 1
;     return XDP_DROP;
     127:	63 1a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r1
     128:	05 00 00 00 00 00 00 00	goto +0 <LBB0_15>

0000000000000408 <LBB0_15>:
; }
     129:	61 a0 a8 ff 00 00 00 00	r0 = *(u32 *)(r10 - 88)
     130:	95 00 00 00 00 00 00 00	exit
