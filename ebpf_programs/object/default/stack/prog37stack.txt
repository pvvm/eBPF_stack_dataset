
ebpf_programs/object/default/prog37.bpf.o:	file format elf64-bpf

Disassembly of section xdp:

0000000000000000 <xdp_prog>:
; int xdp_prog(struct xdp_md *ctx) {
       0:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
;     void *data_end = (void *)(long)ctx->data_end;
       1:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
       2:	61 11 04 00 00 00 00 00	r1 = *(u32 *)(r1 + 4)
       3:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
; 	void *data = (void *)(long)ctx->data;
       4:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
       5:	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0)
       6:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
       7:	b7 01 00 00 02 00 00 00	r1 = 2
; 	__u32 action = XDP_PASS; /* Default action */
       8:	63 1a ac ff 00 00 00 00	*(u32 *)(r10 - 84) = r1
; 	nh.pos = data;
       9:	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 72)
      10:	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r1
; 	nh_type = parse_ethhdr(&nh, data_end, &eth);
      11:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
      12:	bf a2 00 00 00 00 00 00	r2 = r10
;     void *data_end = (void *)(long)ctx->data_end;
      13:	07 02 00 00 a0 ff ff ff	r2 += -96
      14:	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r2
      15:	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r1
      16:	bf a1 00 00 00 00 00 00	r1 = r10
      17:	07 01 00 00 b0 ff ff ff	r1 += -80
      18:	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r1
; struct ethhdr *eth = nh->pos;
      19:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
      20:	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0)
      21:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
      22:	b7 01 00 00 0e 00 00 00	r1 = 14
; int hdrsize = sizeof(*eth);
      23:	63 1a d4 ff 00 00 00 00	*(u32 *)(r10 - 44) = r1
; if (nh->pos + 1 > data_end)
      24:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
      25:	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0)
      26:	07 02 00 00 01 00 00 00	r2 += 1
      27:	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 24)
      28:	3d 21 05 00 00 00 00 00	if r1 >= r2 goto +5 <LBB0_2>
      29:	05 00 00 00 00 00 00 00	goto +0 <LBB0_1>

00000000000000f0 <LBB0_1>:
      30:	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 4294967295 ll
; return -1;
      32:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      33:	05 00 11 00 00 00 00 00	goto +17 <LBB0_3>

0000000000000110 <LBB0_2>:
; nh->pos += hdrsize;
      34:	61 a3 d4 ff 00 00 00 00	r3 = *(u32 *)(r10 - 44)
      35:	67 03 00 00 20 00 00 00	r3 <<= 32
      36:	c7 03 00 00 20 00 00 00	r3 s>>= 32
      37:	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 16)
      38:	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0)
      39:	0f 31 00 00 00 00 00 00	r1 += r3
      40:	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0) = r1
; *ethhdr = eth;
      41:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      42:	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 32)
      43:	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0) = r1
; return eth->h_proto; /* network-byte-order */
      44:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      45:	71 12 0c 00 00 00 00 00	r2 = *(u8 *)(r1 + 12)
      46:	71 11 0d 00 00 00 00 00	r1 = *(u8 *)(r1 + 13)
      47:	67 01 00 00 08 00 00 00	r1 <<= 8
      48:	4f 21 00 00 00 00 00 00	r1 |= r2
      49:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      50:	05 00 00 00 00 00 00 00	goto +0 <LBB0_3>

0000000000000198 <LBB0_3>:
; }
      51:	61 a1 fc ff 00 00 00 00	r1 = *(u32 *)(r10 - 4)
; 	nh_type = parse_ethhdr(&nh, data_end, &eth);
      52:	63 1a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r1
; 	if (nh_type != bpf_htons(ETH_P_IPV6))
      53:	61 a1 9c ff 00 00 00 00	r1 = *(u32 *)(r10 - 100)
      54:	15 01 04 00 86 dd 00 00	if r1 == 56710 goto +4 <LBB0_5>
      55:	05 00 00 00 00 00 00 00	goto +0 <LBB0_4>

00000000000001c0 <LBB0_4>:
      56:	b7 01 00 00 01 00 00 00	r1 = 1
;         return XDP_DROP;
      57:	63 1a d0 ff 00 00 00 00	*(u32 *)(r10 - 48) = r1
      58:	05 00 03 00 00 00 00 00	goto +3 <LBB0_6>

00000000000001d8 <LBB0_5>:
      59:	b7 01 00 00 01 00 00 00	r1 = 1
;     return XDP_DROP; // Drop all packets
      60:	63 1a d0 ff 00 00 00 00	*(u32 *)(r10 - 48) = r1
      61:	05 00 00 00 00 00 00 00	goto +0 <LBB0_6>

00000000000001f0 <LBB0_6>:
; }
      62:	61 a0 d0 ff 00 00 00 00	r0 = *(u32 *)(r10 - 48)
      63:	95 00 00 00 00 00 00 00	exit
