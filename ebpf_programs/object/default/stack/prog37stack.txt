
ebpf_programs/object/default/prog37.bpf.o:	file format elf64-bpf

Disassembly of section .text:

0000000000000000 <parse_ethhdr>:
; {
       0:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
       1:	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r2
       2:	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r3
; struct ethhdr *eth = nh->pos;
       3:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
       4:	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0)
       5:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       6:	b7 01 00 00 0e 00 00 00	r1 = 14
; int hdrsize = sizeof(*eth);
       7:	63 1a d4 ff 00 00 00 00	*(u32 *)(r10 - 44) = r1
; if (nh->pos + 1 > data_end)
       8:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
       9:	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0)
      10:	07 02 00 00 01 00 00 00	r2 += 1
      11:	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 24)
      12:	3d 21 05 00 00 00 00 00	if r1 >= r2 goto +5 <LBB0_2>
      13:	05 00 00 00 00 00 00 00	goto +0 <LBB0_1>

0000000000000070 <LBB0_1>:
      14:	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 4294967295 ll
; return -1;
      16:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      17:	05 00 11 00 00 00 00 00	goto +17 <LBB0_3>

0000000000000090 <LBB0_2>:
; nh->pos += hdrsize;
      18:	61 a3 d4 ff 00 00 00 00	r3 = *(u32 *)(r10 - 44)
      19:	67 03 00 00 20 00 00 00	r3 <<= 32
      20:	c7 03 00 00 20 00 00 00	r3 s>>= 32
      21:	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 16)
      22:	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0)
      23:	0f 31 00 00 00 00 00 00	r1 += r3
      24:	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0) = r1
; *ethhdr = eth;
      25:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      26:	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 32)
      27:	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0) = r1
; return eth->h_proto; /* network-byte-order */
      28:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
      29:	71 12 0c 00 00 00 00 00	r2 = *(u8 *)(r1 + 12)
      30:	71 11 0d 00 00 00 00 00	r1 = *(u8 *)(r1 + 13)
      31:	67 01 00 00 08 00 00 00	r1 <<= 8
      32:	4f 21 00 00 00 00 00 00	r1 |= r2
      33:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      34:	05 00 00 00 00 00 00 00	goto +0 <LBB0_3>

0000000000000118 <LBB0_3>:
; }
      35:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      36:	95 00 00 00 00 00 00 00	exit

Disassembly of section xdp:

0000000000000000 <xdp_prog>:
; int xdp_prog(struct xdp_md *ctx) {
       0:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
;     void *data_end = (void *)(long)ctx->data_end;
       1:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
       2:	61 11 04 00 00 00 00 00	r1 = *(u32 *)(r1 + 4)
       3:	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r1
; 	void *data = (void *)(long)ctx->data;
       4:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
       5:	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0)
       6:	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r1
       7:	b7 01 00 00 02 00 00 00	r1 = 2
; 	__u32 action = XDP_PASS; /* Default action */
       8:	63 1a d4 ff 00 00 00 00	*(u32 *)(r10 - 44) = r1
; 	nh.pos = data;
       9:	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 32)
      10:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
; 	nh_type = parse_ethhdr(&nh, data_end, &eth);
      11:	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 24)
      12:	bf a1 00 00 00 00 00 00	r1 = r10
;     void *data_end = (void *)(long)ctx->data_end;
      13:	07 01 00 00 c8 ff ff ff	r1 += -56
      14:	bf a3 00 00 00 00 00 00	r3 = r10
      15:	07 03 00 00 d8 ff ff ff	r3 += -40
; 	nh_type = parse_ethhdr(&nh, data_end, &eth);
      16:	85 10 00 00 ff ff ff ff	call -1
      17:	63 0a c4 ff 00 00 00 00	*(u32 *)(r10 - 60) = r0
; 	if (nh_type != bpf_htons(ETH_P_IPV6))
      18:	61 a1 c4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 60)
      19:	15 01 04 00 86 dd 00 00	if r1 == 56710 goto +4 <LBB1_2>
      20:	05 00 00 00 00 00 00 00	goto +0 <LBB1_1>

00000000000000a8 <LBB1_1>:
      21:	b7 01 00 00 01 00 00 00	r1 = 1
;         return XDP_DROP;
      22:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      23:	05 00 03 00 00 00 00 00	goto +3 <LBB1_3>

00000000000000c0 <LBB1_2>:
      24:	b7 01 00 00 01 00 00 00	r1 = 1
;     return XDP_DROP; // Drop all packets
      25:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      26:	05 00 00 00 00 00 00 00	goto +0 <LBB1_3>

00000000000000d8 <LBB1_3>:
; }
      27:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
      28:	95 00 00 00 00 00 00 00	exit
