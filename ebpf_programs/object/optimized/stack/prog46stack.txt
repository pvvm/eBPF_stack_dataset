
ebpf_programs/object/optimized/prog46.bpf.o:	file format elf64-bpf

Disassembly of section xdp:

0000000000000000 <xdp_prog>:
;     __u32 cpu = bpf_get_smp_processor_id();
       0:	85 00 00 00 08 00 00 00	call 8
       1:	bf 01 00 00 00 00 00 00	r1 = r0
       2:	67 01 00 00 20 00 00 00	r1 <<= 32
       3:	77 01 00 00 20 00 00 00	r1 >>= 32
;     if(cpu >= 10)
       4:	bf 08 00 00 00 00 00 00	r8 = r0
       5:	07 08 00 00 f6 ff ff ff	r8 += -10
       6:	25 01 01 00 09 00 00 00	if r1 > 9 goto +1 <LBB0_2>
       7:	bf 08 00 00 00 00 00 00	r8 = r0

0000000000000040 <LBB0_2>:
;     __u64 arrival_time = bpf_ktime_get_ns();
       8:	85 00 00 00 05 00 00 00	call 5
       9:	bf 06 00 00 00 00 00 00	r6 = r0
      10:	63 8a e8 ff 00 00 00 00	*(u32 *)(r10 - 24) = r8
      11:	bf a2 00 00 00 00 00 00	r2 = r10
      12:	07 02 00 00 e8 ff ff ff	r2 += -24
;     __u64 * value = bpf_map_lookup_elem(map_pointer, &key);
      13:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      15:	85 00 00 00 01 00 00 00	call 1
;     if(!value)
      16:	15 00 03 00 00 00 00 00	if r0 == 0 goto +3 <LBB0_4>
;     *value += 1;
      17:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
      18:	07 01 00 00 01 00 00 00	r1 += 1
      19:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1

00000000000000a0 <LBB0_4>:
;     __u64 finish_time = bpf_ktime_get_ns();
      20:	85 00 00 00 05 00 00 00	call 5
      21:	bf 07 00 00 00 00 00 00	r7 = r0
      22:	63 8a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r8
      23:	bf a2 00 00 00 00 00 00	r2 = r10
;     __u64 finish_time = bpf_ktime_get_ns();
      24:	07 02 00 00 fc ff ff ff	r2 += -4
;     struct info *value = bpf_map_lookup_elem(&info_array, &key_cpu);
      25:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      27:	85 00 00 00 01 00 00 00	call 1
;     if(!value)
      28:	15 00 0f 00 00 00 00 00	if r0 == 0 goto +15 <LBB0_6>
;     new_value.latency = value->latency + (finish_time - arrival_time);
      29:	1f 67 00 00 00 00 00 00	r7 -= r6
      30:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
      31:	0f 17 00 00 00 00 00 00	r7 += r1
      32:	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r7
;     new_value.counter = value->counter + 1;
      33:	79 01 08 00 00 00 00 00	r1 = *(u64 *)(r0 + 8)
      34:	07 01 00 00 01 00 00 00	r1 += 1
      35:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
      36:	bf a2 00 00 00 00 00 00	r2 = r10
      37:	07 02 00 00 fc ff ff ff	r2 += -4
      38:	bf a3 00 00 00 00 00 00	r3 = r10
      39:	07 03 00 00 e8 ff ff ff	r3 += -24
;     bpf_map_update_elem(&info_array, &key_cpu, &new_value, BPF_ANY);
      40:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      42:	b7 04 00 00 00 00 00 00	r4 = 0
      43:	85 00 00 00 02 00 00 00	call 2

0000000000000160 <LBB0_6>:
; }
      44:	b7 00 00 00 01 00 00 00	r0 = 1
      45:	95 00 00 00 00 00 00 00	exit
