
ebpf_programs/object/optimized/prog46.bpf.o:	file format elf64-bpf

Disassembly of section .text:

0000000000000000 <update_info>:
; int update_info (__u64 arrival_time, __u64 finish_time, int key_cpu) {
       0:	bf 26 00 00 00 00 00 00	r6 = r2
       1:	bf 17 00 00 00 00 00 00	r7 = r1
       2:	63 3a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r3
       3:	bf a2 00 00 00 00 00 00	r2 = r10
       4:	07 02 00 00 fc ff ff ff	r2 += -4
;     struct info *value = bpf_map_lookup_elem(&info_array, &key_cpu);
       5:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       7:	85 00 00 00 01 00 00 00	call 1
       8:	b7 01 00 00 00 00 00 00	r1 = 0
;     if(!value)
       9:	15 00 10 00 00 00 00 00	if r0 == 0 goto +16 <LBB0_2>
;     new_value.latency = value->latency + (finish_time - arrival_time);
      10:	1f 76 00 00 00 00 00 00	r6 -= r7
      11:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
      12:	0f 16 00 00 00 00 00 00	r6 += r1
      13:	7b 6a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r6
;     new_value.counter = value->counter + 1;
      14:	79 01 08 00 00 00 00 00	r1 = *(u64 *)(r0 + 8)
      15:	07 01 00 00 01 00 00 00	r1 += 1
      16:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
      17:	bf a2 00 00 00 00 00 00	r2 = r10
      18:	07 02 00 00 fc ff ff ff	r2 += -4
      19:	bf a3 00 00 00 00 00 00	r3 = r10
      20:	07 03 00 00 e8 ff ff ff	r3 += -24
;     bpf_map_update_elem(&info_array, &key_cpu, &new_value, BPF_ANY);
      21:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      23:	b7 04 00 00 00 00 00 00	r4 = 0
      24:	85 00 00 00 02 00 00 00	call 2
      25:	b7 01 00 00 01 00 00 00	r1 = 1

00000000000000d0 <LBB0_2>:
; }
      26:	bf 10 00 00 00 00 00 00	r0 = r1
      27:	95 00 00 00 00 00 00 00	exit

00000000000000e0 <lookup_map>:
; int lookup_map (int key, void * map_pointer) {
      28:	bf 23 00 00 00 00 00 00	r3 = r2
      29:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      30:	bf a2 00 00 00 00 00 00	r2 = r10
      31:	07 02 00 00 fc ff ff ff	r2 += -4
;     __u64 * value = bpf_map_lookup_elem(map_pointer, &key);
      32:	bf 31 00 00 00 00 00 00	r1 = r3
      33:	85 00 00 00 01 00 00 00	call 1
      34:	b7 01 00 00 00 00 00 00	r1 = 0
;     if(!value)
      35:	15 00 04 00 00 00 00 00	if r0 == 0 goto +4 <LBB1_2>
;     *value += 1;
      36:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
      37:	07 01 00 00 01 00 00 00	r1 += 1
      38:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1
      39:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000140 <LBB1_2>:
; }
      40:	bf 10 00 00 00 00 00 00	r0 = r1
      41:	95 00 00 00 00 00 00 00	exit

0000000000000150 <get_and_check_cpu_id>:
;     __u32 cpu = bpf_get_smp_processor_id();
      42:	85 00 00 00 08 00 00 00	call 8
      43:	bf 02 00 00 00 00 00 00	r2 = r0
      44:	67 02 00 00 20 00 00 00	r2 <<= 32
      45:	77 02 00 00 20 00 00 00	r2 >>= 32
;     if(cpu >= 10)
      46:	bf 01 00 00 00 00 00 00	r1 = r0
      47:	07 01 00 00 f6 ff ff ff	r1 += -10
      48:	25 02 01 00 09 00 00 00	if r2 > 9 goto +1 <LBB2_2>
      49:	bf 01 00 00 00 00 00 00	r1 = r0

0000000000000190 <LBB2_2>:
;     return cpu;
      50:	bf 10 00 00 00 00 00 00	r0 = r1
      51:	95 00 00 00 00 00 00 00	exit

Disassembly of section xdp:

0000000000000000 <xdp_prog>:
;     __u32 cpu = bpf_get_smp_processor_id();
       0:	85 00 00 00 08 00 00 00	call 8
       1:	bf 01 00 00 00 00 00 00	r1 = r0
       2:	67 01 00 00 20 00 00 00	r1 <<= 32
       3:	77 01 00 00 20 00 00 00	r1 >>= 32
;     if(cpu >= 10)
       4:	bf 08 00 00 00 00 00 00	r8 = r0
       5:	07 08 00 00 f6 ff ff ff	r8 += -10
       6:	25 01 01 00 09 00 00 00	if r1 > 9 goto +1 <LBB3_2>
       7:	bf 08 00 00 00 00 00 00	r8 = r0

0000000000000040 <LBB3_2>:
;     __u64 arrival_time = bpf_ktime_get_ns();
       8:	85 00 00 00 05 00 00 00	call 5
       9:	bf 06 00 00 00 00 00 00	r6 = r0
      10:	63 8a e8 ff 00 00 00 00	*(u32 *)(r10 - 24) = r8
      11:	bf a2 00 00 00 00 00 00	r2 = r10
      12:	07 02 00 00 e8 ff ff ff	r2 += -24
;     __u64 * value = bpf_map_lookup_elem(map_pointer, &key);
      13:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      15:	85 00 00 00 01 00 00 00	call 1
;     if(!value)
      16:	15 00 03 00 00 00 00 00	if r0 == 0 goto +3 <LBB3_4>
;     *value += 1;
      17:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
      18:	07 01 00 00 01 00 00 00	r1 += 1
      19:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1

00000000000000a0 <LBB3_4>:
;     __u64 finish_time = bpf_ktime_get_ns();
      20:	85 00 00 00 05 00 00 00	call 5
      21:	bf 07 00 00 00 00 00 00	r7 = r0
      22:	63 8a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r8
      23:	bf a2 00 00 00 00 00 00	r2 = r10
;     __u64 finish_time = bpf_ktime_get_ns();
      24:	07 02 00 00 fc ff ff ff	r2 += -4
;     struct info *value = bpf_map_lookup_elem(&info_array, &key_cpu);
      25:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      27:	85 00 00 00 01 00 00 00	call 1
;     if(!value)
      28:	15 00 0f 00 00 00 00 00	if r0 == 0 goto +15 <LBB3_6>
;     new_value.latency = value->latency + (finish_time - arrival_time);
      29:	1f 67 00 00 00 00 00 00	r7 -= r6
      30:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
      31:	0f 17 00 00 00 00 00 00	r7 += r1
      32:	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r7
;     new_value.counter = value->counter + 1;
      33:	79 01 08 00 00 00 00 00	r1 = *(u64 *)(r0 + 8)
      34:	07 01 00 00 01 00 00 00	r1 += 1
      35:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
      36:	bf a2 00 00 00 00 00 00	r2 = r10
      37:	07 02 00 00 fc ff ff ff	r2 += -4
      38:	bf a3 00 00 00 00 00 00	r3 = r10
      39:	07 03 00 00 e8 ff ff ff	r3 += -24
;     bpf_map_update_elem(&info_array, &key_cpu, &new_value, BPF_ANY);
      40:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      42:	b7 04 00 00 00 00 00 00	r4 = 0
      43:	85 00 00 00 02 00 00 00	call 2

0000000000000160 <LBB3_6>:
; }
      44:	b7 00 00 00 01 00 00 00	r0 = 1
      45:	95 00 00 00 00 00 00 00	exit
