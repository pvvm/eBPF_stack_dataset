
ebpf_programs/object/optimized/prog42.bpf.o:	file format elf64-bpf

Disassembly of section .text:

0000000000000000 <parse_ethhdr>:
; {
       0:	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 4294967295 ll
; struct ethhdr *eth = nh->pos;
       2:	79 14 00 00 00 00 00 00	r4 = *(u64 *)(r1 + 0)
; if (nh->pos + 1 > data_end)
       3:	bf 45 00 00 00 00 00 00	r5 = r4
       4:	07 05 00 00 01 00 00 00	r5 += 1
       5:	2d 25 08 00 00 00 00 00	if r5 > r2 goto +8 <LBB0_2>
; nh->pos += hdrsize;
       6:	bf 42 00 00 00 00 00 00	r2 = r4
       7:	07 02 00 00 0e 00 00 00	r2 += 14
       8:	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0) = r2
; *ethhdr = eth;
       9:	7b 43 00 00 00 00 00 00	*(u64 *)(r3 + 0) = r4
; return eth->h_proto;
      10:	71 41 0c 00 00 00 00 00	r1 = *(u8 *)(r4 + 12)
      11:	71 40 0d 00 00 00 00 00	r0 = *(u8 *)(r4 + 13)
      12:	67 00 00 00 08 00 00 00	r0 <<= 8
      13:	4f 10 00 00 00 00 00 00	r0 |= r1

0000000000000070 <LBB0_2>:
; }
      14:	95 00 00 00 00 00 00 00	exit

0000000000000078 <parse_iphdr>:
; {
      15:	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 4294967295 ll
; struct iphdr *iph = nh->pos;
      17:	79 14 00 00 00 00 00 00	r4 = *(u64 *)(r1 + 0)
; if (iph + 1 > data_end)
      18:	bf 45 00 00 00 00 00 00	r5 = r4
      19:	07 05 00 00 14 00 00 00	r5 += 20
      20:	2d 25 0b 00 00 00 00 00	if r5 > r2 goto +11 <LBB1_4>
; hdrsize = iph->ihl * 4;
      21:	71 45 00 00 00 00 00 00	r5 = *(u8 *)(r4 + 0)
      22:	67 05 00 00 02 00 00 00	r5 <<= 2
      23:	57 05 00 00 3c 00 00 00	r5 &= 60
      24:	b7 06 00 00 14 00 00 00	r6 = 20
; if(hdrsize < sizeof(*iph))
      25:	2d 56 06 00 00 00 00 00	if r6 > r5 goto +6 <LBB1_4>
; if (nh->pos + hdrsize > data_end)
      26:	bf 46 00 00 00 00 00 00	r6 = r4
      27:	0f 56 00 00 00 00 00 00	r6 += r5
      28:	2d 26 03 00 00 00 00 00	if r6 > r2 goto +3 <LBB1_4>
; nh->pos += hdrsize;
      29:	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0) = r6
; *iphdr = iph;
      30:	7b 43 00 00 00 00 00 00	*(u64 *)(r3 + 0) = r4
; return iph->protocol;
      31:	71 40 09 00 00 00 00 00	r0 = *(u8 *)(r4 + 9)

0000000000000100 <LBB1_4>:
; }
      32:	95 00 00 00 00 00 00 00	exit

0000000000000108 <swap_src_dst_mac>:
; 	__builtin_memcpy(h_tmp, eth->h_source, ETH_ALEN);
      33:	71 12 0b 00 00 00 00 00	r2 = *(u8 *)(r1 + 11)
      34:	67 02 00 00 08 00 00 00	r2 <<= 8
      35:	71 13 0a 00 00 00 00 00	r3 = *(u8 *)(r1 + 10)
      36:	4f 32 00 00 00 00 00 00	r2 |= r3
      37:	6b 2a fc ff 00 00 00 00	*(u16 *)(r10 - 4) = r2
      38:	71 12 07 00 00 00 00 00	r2 = *(u8 *)(r1 + 7)
      39:	67 02 00 00 08 00 00 00	r2 <<= 8
      40:	71 13 06 00 00 00 00 00	r3 = *(u8 *)(r1 + 6)
      41:	4f 32 00 00 00 00 00 00	r2 |= r3
      42:	71 13 09 00 00 00 00 00	r3 = *(u8 *)(r1 + 9)
      43:	67 03 00 00 08 00 00 00	r3 <<= 8
      44:	71 14 08 00 00 00 00 00	r4 = *(u8 *)(r1 + 8)
      45:	4f 43 00 00 00 00 00 00	r3 |= r4
      46:	67 03 00 00 10 00 00 00	r3 <<= 16
      47:	4f 23 00 00 00 00 00 00	r3 |= r2
      48:	63 3a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r3
; 	__builtin_memcpy(eth->h_source, eth->h_dest, ETH_ALEN);
      49:	71 12 02 00 00 00 00 00	r2 = *(u8 *)(r1 + 2)
      50:	73 21 08 00 00 00 00 00	*(u8 *)(r1 + 8) = r2
      51:	71 12 03 00 00 00 00 00	r2 = *(u8 *)(r1 + 3)
      52:	73 21 09 00 00 00 00 00	*(u8 *)(r1 + 9) = r2
      53:	71 12 00 00 00 00 00 00	r2 = *(u8 *)(r1 + 0)
      54:	73 21 06 00 00 00 00 00	*(u8 *)(r1 + 6) = r2
      55:	71 12 01 00 00 00 00 00	r2 = *(u8 *)(r1 + 1)
      56:	73 21 07 00 00 00 00 00	*(u8 *)(r1 + 7) = r2
      57:	71 12 04 00 00 00 00 00	r2 = *(u8 *)(r1 + 4)
      58:	73 21 0a 00 00 00 00 00	*(u8 *)(r1 + 10) = r2
      59:	71 12 05 00 00 00 00 00	r2 = *(u8 *)(r1 + 5)
      60:	73 21 0b 00 00 00 00 00	*(u8 *)(r1 + 11) = r2
; 	__builtin_memcpy(eth->h_dest, h_tmp, ETH_ALEN);
      61:	61 a2 f8 ff 00 00 00 00	r2 = *(u32 *)(r10 - 8)
      62:	bf 23 00 00 00 00 00 00	r3 = r2
      63:	77 03 00 00 10 00 00 00	r3 >>= 16
      64:	73 31 02 00 00 00 00 00	*(u8 *)(r1 + 2) = r3
      65:	bf 23 00 00 00 00 00 00	r3 = r2
      66:	77 03 00 00 18 00 00 00	r3 >>= 24
      67:	73 31 03 00 00 00 00 00	*(u8 *)(r1 + 3) = r3
      68:	73 21 00 00 00 00 00 00	*(u8 *)(r1 + 0) = r2
      69:	77 02 00 00 08 00 00 00	r2 >>= 8
      70:	73 21 01 00 00 00 00 00	*(u8 *)(r1 + 1) = r2
      71:	69 a2 fc ff 00 00 00 00	r2 = *(u16 *)(r10 - 4)
      72:	73 21 04 00 00 00 00 00	*(u8 *)(r1 + 4) = r2
      73:	77 02 00 00 08 00 00 00	r2 >>= 8
      74:	73 21 05 00 00 00 00 00	*(u8 *)(r1 + 5) = r2
; }
      75:	95 00 00 00 00 00 00 00	exit

Disassembly of section xdp:

0000000000000000 <xdp_prog>:
;     void *data_end = (void *)(long)ctx->data_end;
       0:	61 12 04 00 00 00 00 00	r2 = *(u32 *)(r1 + 4)
; 	void *data = (void *)(long)ctx->data;
       1:	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0)
; if (nh->pos + 1 > data_end)
       2:	bf 13 00 00 00 00 00 00	r3 = r1
       3:	07 03 00 00 01 00 00 00	r3 += 1
       4:	2d 23 3d 00 00 00 00 00	if r3 > r2 goto +61 <LBB3_7>
; return eth->h_proto;
       5:	71 13 0d 00 00 00 00 00	r3 = *(u8 *)(r1 + 13)
       6:	67 03 00 00 08 00 00 00	r3 <<= 8
       7:	71 14 0c 00 00 00 00 00	r4 = *(u8 *)(r1 + 12)
       8:	4f 43 00 00 00 00 00 00	r3 |= r4
; 	if (nh_type != bpf_htons(ETH_P_IPV6))
       9:	55 03 38 00 86 dd 00 00	if r3 != 56710 goto +56 <LBB3_7>
      10:	bf 13 00 00 00 00 00 00	r3 = r1
      11:	07 03 00 00 22 00 00 00	r3 += 34
; 	if (nh_type != bpf_htons(ETH_P_IPV6))
      12:	2d 23 35 00 00 00 00 00	if r3 > r2 goto +53 <LBB3_7>
      13:	bf 13 00 00 00 00 00 00	r3 = r1
      14:	07 03 00 00 0e 00 00 00	r3 += 14
; hdrsize = iph->ihl * 4;
      15:	71 34 00 00 00 00 00 00	r4 = *(u8 *)(r3 + 0)
      16:	67 04 00 00 02 00 00 00	r4 <<= 2
      17:	57 04 00 00 3c 00 00 00	r4 &= 60
      18:	b7 05 00 00 14 00 00 00	r5 = 20
; if(hdrsize < sizeof(*iph))
      19:	2d 45 2e 00 00 00 00 00	if r5 > r4 goto +46 <LBB3_7>
; if (nh->pos + hdrsize > data_end)
      20:	0f 43 00 00 00 00 00 00	r3 += r4
      21:	2d 23 2c 00 00 00 00 00	if r3 > r2 goto +44 <LBB3_7>
; return iph->protocol;
      22:	71 12 17 00 00 00 00 00	r2 = *(u8 *)(r1 + 23)
; 	if (nh_type != 0)
      23:	55 02 2a 00 00 00 00 00	if r2 != 0 goto +42 <LBB3_7>
; 	__builtin_memcpy(h_tmp, eth->h_source, ETH_ALEN);
      24:	71 12 0b 00 00 00 00 00	r2 = *(u8 *)(r1 + 11)
      25:	67 02 00 00 08 00 00 00	r2 <<= 8
      26:	71 13 0a 00 00 00 00 00	r3 = *(u8 *)(r1 + 10)
      27:	4f 32 00 00 00 00 00 00	r2 |= r3
      28:	6b 2a fc ff 00 00 00 00	*(u16 *)(r10 - 4) = r2
      29:	71 12 07 00 00 00 00 00	r2 = *(u8 *)(r1 + 7)
      30:	67 02 00 00 08 00 00 00	r2 <<= 8
      31:	71 13 06 00 00 00 00 00	r3 = *(u8 *)(r1 + 6)
      32:	4f 32 00 00 00 00 00 00	r2 |= r3
      33:	71 13 09 00 00 00 00 00	r3 = *(u8 *)(r1 + 9)
      34:	67 03 00 00 08 00 00 00	r3 <<= 8
      35:	71 14 08 00 00 00 00 00	r4 = *(u8 *)(r1 + 8)
      36:	4f 43 00 00 00 00 00 00	r3 |= r4
      37:	67 03 00 00 10 00 00 00	r3 <<= 16
      38:	4f 23 00 00 00 00 00 00	r3 |= r2
      39:	63 3a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r3
; 	__builtin_memcpy(eth->h_source, eth->h_dest, ETH_ALEN);
      40:	71 12 02 00 00 00 00 00	r2 = *(u8 *)(r1 + 2)
      41:	73 21 08 00 00 00 00 00	*(u8 *)(r1 + 8) = r2
      42:	71 12 03 00 00 00 00 00	r2 = *(u8 *)(r1 + 3)
      43:	73 21 09 00 00 00 00 00	*(u8 *)(r1 + 9) = r2
      44:	71 12 00 00 00 00 00 00	r2 = *(u8 *)(r1 + 0)
      45:	73 21 06 00 00 00 00 00	*(u8 *)(r1 + 6) = r2
      46:	71 12 01 00 00 00 00 00	r2 = *(u8 *)(r1 + 1)
      47:	73 21 07 00 00 00 00 00	*(u8 *)(r1 + 7) = r2
      48:	71 12 04 00 00 00 00 00	r2 = *(u8 *)(r1 + 4)
      49:	73 21 0a 00 00 00 00 00	*(u8 *)(r1 + 10) = r2
      50:	71 12 05 00 00 00 00 00	r2 = *(u8 *)(r1 + 5)
      51:	73 21 0b 00 00 00 00 00	*(u8 *)(r1 + 11) = r2
; 	__builtin_memcpy(eth->h_dest, h_tmp, ETH_ALEN);
      52:	61 a2 f8 ff 00 00 00 00	r2 = *(u32 *)(r10 - 8)
      53:	bf 23 00 00 00 00 00 00	r3 = r2
      54:	77 03 00 00 10 00 00 00	r3 >>= 16
      55:	73 31 02 00 00 00 00 00	*(u8 *)(r1 + 2) = r3
      56:	bf 23 00 00 00 00 00 00	r3 = r2
      57:	77 03 00 00 18 00 00 00	r3 >>= 24
      58:	73 31 03 00 00 00 00 00	*(u8 *)(r1 + 3) = r3
      59:	73 21 00 00 00 00 00 00	*(u8 *)(r1 + 0) = r2
      60:	77 02 00 00 08 00 00 00	r2 >>= 8
      61:	73 21 01 00 00 00 00 00	*(u8 *)(r1 + 1) = r2
      62:	69 a2 fc ff 00 00 00 00	r2 = *(u16 *)(r10 - 4)
      63:	73 21 04 00 00 00 00 00	*(u8 *)(r1 + 4) = r2
      64:	77 02 00 00 08 00 00 00	r2 >>= 8
      65:	73 21 05 00 00 00 00 00	*(u8 *)(r1 + 5) = r2

0000000000000210 <LBB3_7>:
; }
      66:	b7 00 00 00 01 00 00 00	r0 = 1
      67:	95 00 00 00 00 00 00 00	exit
