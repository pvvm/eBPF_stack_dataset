
ebpf_programs/object/optimized/prog45.bpf.o:	file format elf64-bpf

Disassembly of section .text:

0000000000000000 <update_info>:
; int update_info (__u64 arrival_time, __u64 finish_time, int key_cpu) {
       0:	bf 26 00 00 00 00 00 00	r6 = r2
       1:	bf 17 00 00 00 00 00 00	r7 = r1
       2:	63 3a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r3
       3:	bf a2 00 00 00 00 00 00	r2 = r10
       4:	07 02 00 00 fc ff ff ff	r2 += -4
;     struct info *value = bpf_map_lookup_elem(&info_array, &key_cpu);
       5:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       7:	85 00 00 00 01 00 00 00	call 1
       8:	b7 01 00 00 00 00 00 00	r1 = 0
;     if(!value)
       9:	15 00 10 00 00 00 00 00	if r0 == 0 goto +16 <LBB0_2>
;     new_value.latency = value->latency + (finish_time - arrival_time);
      10:	1f 76 00 00 00 00 00 00	r6 -= r7
      11:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
      12:	0f 16 00 00 00 00 00 00	r6 += r1
      13:	7b 6a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r6
;     new_value.counter = value->counter + 1;
      14:	79 01 08 00 00 00 00 00	r1 = *(u64 *)(r0 + 8)
      15:	07 01 00 00 01 00 00 00	r1 += 1
      16:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
      17:	bf a2 00 00 00 00 00 00	r2 = r10
      18:	07 02 00 00 fc ff ff ff	r2 += -4
      19:	bf a3 00 00 00 00 00 00	r3 = r10
      20:	07 03 00 00 e8 ff ff ff	r3 += -24
;     bpf_map_update_elem(&info_array, &key_cpu, &new_value, BPF_ANY);
      21:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      23:	b7 04 00 00 00 00 00 00	r4 = 0
      24:	85 00 00 00 02 00 00 00	call 2
      25:	b7 01 00 00 01 00 00 00	r1 = 1

00000000000000d0 <LBB0_2>:
; }
      26:	bf 10 00 00 00 00 00 00	r0 = r1
      27:	95 00 00 00 00 00 00 00	exit

00000000000000e0 <lookup_map>:
; int lookup_map (int key, void * map_pointer) {
      28:	bf 23 00 00 00 00 00 00	r3 = r2
      29:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      30:	bf a2 00 00 00 00 00 00	r2 = r10
      31:	07 02 00 00 fc ff ff ff	r2 += -4
;     __u64 * value = bpf_map_lookup_elem(map_pointer, &key);
      32:	bf 31 00 00 00 00 00 00	r1 = r3
      33:	85 00 00 00 01 00 00 00	call 1
      34:	b7 01 00 00 00 00 00 00	r1 = 0
;     if(!value)
      35:	15 00 04 00 00 00 00 00	if r0 == 0 goto +4 <LBB1_2>
;     *value += 1;
      36:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
      37:	07 01 00 00 01 00 00 00	r1 += 1
      38:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1
      39:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000140 <LBB1_2>:
; }
      40:	bf 10 00 00 00 00 00 00	r0 = r1
      41:	95 00 00 00 00 00 00 00	exit

Disassembly of section xdp:

0000000000000000 <xdp_prog>:
;     __u32 cpu = bpf_get_smp_processor_id();
       0:	85 00 00 00 08 00 00 00	call 8
       1:	bf 07 00 00 00 00 00 00	r7 = r0
;     __u64 arrival_time = bpf_ktime_get_ns();
       2:	85 00 00 00 05 00 00 00	call 5
       3:	bf 06 00 00 00 00 00 00	r6 = r0
       4:	63 7a d8 ff 00 00 00 00	*(u32 *)(r10 - 40) = r7
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 d8 ff ff ff	r2 += -40
;     __u64 * value = bpf_map_lookup_elem(map_pointer, &key);
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
;     if(!value)
      10:	15 00 03 00 00 00 00 00	if r0 == 0 goto +3 <LBB2_2>
;     *value += 1;
      11:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
      12:	07 01 00 00 01 00 00 00	r1 += 1
      13:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1

0000000000000070 <LBB2_2>:
;     __u64 finish_time = bpf_ktime_get_ns();
      14:	85 00 00 00 05 00 00 00	call 5
      15:	bf 08 00 00 00 00 00 00	r8 = r0
      16:	63 7a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r7
      17:	bf a2 00 00 00 00 00 00	r2 = r10
;     __u64 finish_time = bpf_ktime_get_ns();
      18:	07 02 00 00 fc ff ff ff	r2 += -4
;     struct info *value = bpf_map_lookup_elem(&info_array, &key_cpu);
      19:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      21:	85 00 00 00 01 00 00 00	call 1
;     if(!value)
      22:	15 00 10 00 00 00 00 00	if r0 == 0 goto +16 <LBB2_4>
;     new_value.latency = value->latency + (finish_time - arrival_time);
      23:	1f 68 00 00 00 00 00 00	r8 -= r6
      24:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
      25:	0f 18 00 00 00 00 00 00	r8 += r1
      26:	7b 8a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r8
;     new_value.counter = value->counter + 1;
      27:	79 01 08 00 00 00 00 00	r1 = *(u64 *)(r0 + 8)
      28:	07 01 00 00 01 00 00 00	r1 += 1
      29:	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r1
      30:	bf a2 00 00 00 00 00 00	r2 = r10
      31:	07 02 00 00 fc ff ff ff	r2 += -4
      32:	bf a3 00 00 00 00 00 00	r3 = r10
      33:	07 03 00 00 d8 ff ff ff	r3 += -40
;     bpf_map_update_elem(&info_array, &key_cpu, &new_value, BPF_ANY);
      34:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      36:	b7 04 00 00 00 00 00 00	r4 = 0
      37:	85 00 00 00 02 00 00 00	call 2
      38:	05 00 12 00 00 00 00 00	goto +18 <LBB2_5>

0000000000000138 <LBB2_4>:
      39:	b7 01 00 00 00 00 00 00	r1 = 0
;         bpf_printk("Error while looking up timer map");
      40:	73 1a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r1
      41:	18 01 00 00 69 6d 65 72 00 00 00 00 20 6d 61 70	r1 = 8097873591114493289 ll
      43:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
      44:	18 01 00 00 69 6e 67 20 00 00 00 00 75 70 20 74	r1 = 8367811756011515497 ll
      46:	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r1
      47:	18 01 00 00 69 6c 65 20 00 00 00 00 6c 6f 6f 6b	r1 = 7741528794663840873 ll
      49:	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r1
      50:	18 01 00 00 45 72 72 6f 00 00 00 00 72 20 77 68	r1 = 7527520978041205317 ll
      52:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
      53:	bf a1 00 00 00 00 00 00	r1 = r10
      54:	07 01 00 00 d8 ff ff ff	r1 += -40
      55:	b7 02 00 00 21 00 00 00	r2 = 33
      56:	85 00 00 00 06 00 00 00	call 6

00000000000001c8 <LBB2_5>:
;     return XDP_DROP;
      57:	b7 00 00 00 01 00 00 00	r0 = 1
      58:	95 00 00 00 00 00 00 00	exit
